<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Delta.Utilities.Compression</name>
    </assembly>
    <members>
        <member name="T:Delta.Utilities.Compression.Streams.InflaterInputStream">
            <summary>
            This filter stream is used to decompress data compressed using the
            "deflate" format. The "deflate" format is described in RFC 1951.
            This stream may form the basis for other decompression filters.
            Author of the original java version: John Leuner.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.InflaterInputStream.inf">
            <summary>
            Decompressor for this stream
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.InflaterInputStream.inputBuffer">
            <summary>
            <see cref="T:Delta.Utilities.Compression.Streams.InflaterInputBuffer">Input buffer</see> for this stream.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.InflaterInputStream.baseInputStream">
            <summary>
            Base stream the inflater reads from.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.InflaterInputStream.csize">
            <summary>
            The compressed size
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.InflaterInputStream.isClosed">
            <summary>
            Is closed
            </summary>
            <returns>False</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.InflaterInputStream.isStreamOwner">
            <summary>
            Is stream owner
            </summary>
            <returns>True</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream)">
            <summary>
            Create an InflaterInputStream with the default decompressor
            and a default buffer size of 4KB.
            </summary>
            <param name = "baseInputStream">
            The InputStream to read bytes from
            </param>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream,Delta.Utilities.Compression.Inflaters.Inflater)">
            <summary>
            Create an InflaterInputStream with the specified decompressor
            and a default buffer size of 4KB.
            </summary>
            <param name = "baseInputStream">
            The source of input data
            </param>
            <param name = "inf">
            The decompressor used to decompress data read from baseInputStream
            </param>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream,Delta.Utilities.Compression.Inflaters.Inflater,System.Int32)">
            <summary>
            Create an InflaterInputStream with the specified decompressor
            and the specified buffer size.
            </summary>
            <param name = "baseInputStream">
            The InputStream to read bytes from
            </param>
            <param name = "inflater">
            The decompressor to use
            </param>
            <param name = "bufferSize">
            Size of the buffer to use
            </param>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.InflaterInputStream.Flush">
            <summary>
            Flushes the baseInputStream
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.InflaterInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream
            Always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.InflaterInputStream.SetLength(System.Int64)">
            <summary>
            Set the length of the current stream
            Always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.InflaterInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to stream and advances the current position
            This method always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.InflaterInputStream.WriteByte(System.Byte)">
            <summary>
            Writes one byte to the current stream and advances the current position
            Always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.InflaterInputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Entry point to begin an asynchronous write.
            Always throws a NotSupportedException.
            </summary>
            <param name="buffer">The buffer to write data from</param>
            <param name="offset">Offset of first byte to write</param>
            <param name="count">The maximum number of bytes to write</param>
            <param name="callback">The method to be called when the asynchronous
            write operation is completed</param>
            <param name="state">A user-provided object that distinguishes this
            particular asynchronous write request from other requests</param>
            <returns>An <see cref="T:System.IAsyncResult">IAsyncResult</see> that
            references the asynchronous write</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.InflaterInputStream.Close">
            <summary>
            Closes the input stream.  When <see cref="P:Delta.Utilities.Compression.Streams.InflaterInputStream.IsStreamOwner"></see>
            is true the underlying stream is also closed.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.InflaterInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decompresses data into the byte array
            </summary>
            <param name="buffer">The array to read and decompress data into</param>
            <param name="offset">The offset indicating where the data should be
            placed</param>
            <param name="count">The number of bytes to decompress</param>
            <returns>The number of bytes read. Zero signals the end of stream
            </returns>
            <exception cref="T:Delta.Utilities.Compression.CompressionException">Inflater needs a dictionary
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.InflaterInputStream.Skip(System.Int64)">
            <summary>
            Skip specified number of bytes of uncompressed data
            </summary>
            <param name="numberOfBytesToSkip">Number of bytes to skip</param>
            <returns>The number of bytes skipped, zero if the end of stream has
            been reached.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Number of bytes to skip is zero or less
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.InflaterInputStream.Fill">
            <summary>
            Fills the buffer with more data to decompress.
            </summary>
            <exception cref="T:Delta.Utilities.Compression.CompressionException">
            Stream ends early
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.InflaterInputStream.StopDecrypting">
            <summary>
            Clear any cryptographic state.
            </summary>		
        </member>
        <member name="P:Delta.Utilities.Compression.Streams.InflaterInputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of underlying stream.
            When the flag is true <see cref="M:Delta.Utilities.Compression.Streams.InflaterInputStream.Close"/> will close the underlying
            stream also.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="P:Delta.Utilities.Compression.Streams.InflaterInputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.Streams.InflaterInputStream.CanSeek">
            <summary>
            Gets a value of false indicating seeking is not supported for this
            stream.
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.Streams.InflaterInputStream.CanWrite">
            <summary>
            Gets a value of false indicating that this stream is not writeable.
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.Streams.InflaterInputStream.Length">
            <summary>
            A value representing the length of the stream in bytes.
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.Streams.InflaterInputStream.Position">
            <summary>
            The current position within the stream.
            Throws a NotSupportedException when attempting to set the position
            </summary>
            <exception cref="T:System.NotSupportedException">Attempting to set the position
            </exception>
        </member>
        <member name="P:Delta.Utilities.Compression.Streams.InflaterInputStream.IsEntryAvailable">
            <summary>
            Returns 0 once the end of the stream (EOF) has been reached.
            Otherwise returns 1.
            </summary>
        </member>
        <member name="T:Delta.Utilities.Compression.CompressionMethod">
            <summary>
            The kind of compression used for an entry in an archive
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.CompressionMethod.Stored">
            <summary>
            A direct copy of the file contents is held in the archive.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.CompressionMethod.Deflated">
            <summary>
            Common Zip compression method using a sliding dictionary of up to
            32KB and secondary compression from Huffman/Shannon-Fano trees.
            </summary>
        </member>
        <member name="T:Delta.Utilities.Compression.Inflaters.InflaterHuffmanTree">
            <summary>
            Huffman tree used for inflation
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.InflaterHuffmanTree.MaximumBitLength">
            <summary>
            Maximum bit length
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.InflaterHuffmanTree.defLitLenTree">
            <summary>
            Literal length tree
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.InflaterHuffmanTree.defDistTree">
            <summary>
            Distance tree
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.InflaterHuffmanTree.tree">
            <summary>
            Tree
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Inflaters.InflaterHuffmanTree.#cctor">
            <summary>
            Create inflater huffman tree
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Inflaters.InflaterHuffmanTree.#ctor(System.Byte[])">
            <summary>
            Constructs a Huffman tree from the array of code lengths.
            </summary>
            <param name = "codeLengths">
            the array of code lengths
            </param>
        </member>
        <member name="M:Delta.Utilities.Compression.Inflaters.InflaterHuffmanTree.GetSymbol(Delta.Utilities.Compression.Streams.StreamManipulator)">
            <summary>
            Reads the next symbol from input.  The symbol is encoded using the
            huffman tree.
            </summary>
            <param name="input">
            input the input source.
            </param>
            <returns>
            the next symbol, or -1 if not enough input is available.
            </returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Inflaters.InflaterHuffmanTree.BuildTree(System.Byte[])">
            <summary>
            Build tree
            </summary>
            <param name="codeLengths">Code lengths</param>
        </member>
        <member name="T:Delta.Utilities.Compression.ZipException">
            <summary>
            Represents errors specific to Zip file handling
            </summary>
        </member>
        <member name="T:Delta.Utilities.Compression.CompressionException">
            <summary>
            CompressionException is the base exception class for the SharpZipLibrary.
            All library exceptions are derived from this.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.CompressionException.#ctor">
            <summary>
            Initializes a new instance of the SharpZipLibraryException class.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.CompressionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SharpZipLibraryException class with
            a specified error message.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.CompressionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the SharpZipLibraryException class with
            a specified error message and a reference to the inner exception that
            is the cause of this exception.
            </summary>
            <param name="message">Error message string</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipException.#ctor">
            <summary>
            Initializes a new instance of the ZipException class.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ZipException class with a specified
            error message.
            </summary>
        </member>
        <member name="T:Delta.Utilities.Compression.Streams.OutputWindow">
            <summary>
            Contains the output from the Inflation process.
            We need to have a window so that we can refer backwards into the
            output stream to repeat stuff.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.OutputWindow.WindowSize">
            <summary>
            Window size
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.OutputWindow.WindowMask">
            <summary>
            Window mask
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.OutputWindow.window">
            <summary>
            The window is 2^15 bytes
            </summary>
            <returns>Byte</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.OutputWindow.windowEnd">
            <summary>
            Window end
            </summary>
            <returns>0</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.OutputWindow.windowFilled">
            <summary>
            Window filled
            </summary>
            <returns>0</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.OutputWindow.Write(System.Int32)">
            <summary>
            Write a byte to this output window
            </summary>
            <param name="abyte">value to write</param>
            <exception cref="T:System.InvalidOperationException">
            if window is full
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.OutputWindow.Repeat(System.Int32,System.Int32)">
            <summary>
            Append a byte pattern already in the window itself
            </summary>
            <param name="len">length of pattern to copy</param>
            <param name="dist">distance from end of window pattern occurs</param>
            <exception cref="T:System.InvalidOperationException">
            If the repeated data overflows the window
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.OutputWindow.CopyStored(Delta.Utilities.Compression.Streams.StreamManipulator,System.Int32)">
            <summary>
            Copy from input manipulator to internal window
            </summary>
            <param name="input">source of data</param>
            <param name="len">length of data to copy</param>
            <returns>the number of bytes copied</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.OutputWindow.CopyDict(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy dictionary to window
            </summary>
            <param name="dict">source dictionary</param>
            <param name="offset">offset of start in source dictionary</param>
            <param name="len">length of dictionary</param>
            <exception cref="T:System.InvalidOperationException">
            If window isnt empty
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.OutputWindow.GetFreeSpace">
            <summary>
            Get remaining unfilled space in window
            </summary>
            <returns>Number of bytes left in window</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.OutputWindow.GetAvailable">
            <summary>
            Get bytes available for output in window
            </summary>
            <returns>Number of bytes filled</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.OutputWindow.CopyOutput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy contents of window to output
            </summary>
            <param name="output">buffer to copy to</param>
            <param name="offset">offset to start at</param>
            <param name="len">number of bytes to count</param>
            <returns>The number of bytes copied</returns>
            <exception cref="T:System.InvalidOperationException">
            If a window underflow occurs
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.OutputWindow.Reset">
            <summary>
            Reset by clearing window so <see cref="M:Delta.Utilities.Compression.Streams.OutputWindow.GetAvailable">GetAvailable</see>
            returns 0.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.OutputWindow.SlowRepeat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Slow repeat
            </summary>
            <param name="repStart">Rep start</param>
            <param name="len">Len</param>
            <param name="dist">Dist</param>
        </member>
        <member name="T:Delta.Utilities.Compression.Inflaters.Inflater">
            <summary>
            Inflater is used to decompress data that has been compressed according
            to the "deflate" standard described in rfc1950.
            <para />
            The usage is as following.  First you have to set some input with
            <code>setInput()</code>, then inflate() it.  If inflate doesn't
            inflate any bytes there may be three reasons:
            <ul>
            <li>needsInput() returns true because the input buffer is empty.
            You have to provide more input with <code>setInput()</code>.
            NOTE: needsInput() also returns true when, the stream is finished.
            </li>
            <li>needsDictionary() returns true, you have to provide a preset
            dictionary with <code>setDictionary()</code>.</li>
            <li>finished() returns true, the inflater has finished.</li>
            </ul>
            Once the first output byte is produced, a dictionary will not be
            needed at a later stage.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.Inflater.DecodeHeaderState">
            <summary>
            These are the possible states for an inflater to perform decoding.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.Inflater.DecodeDictionaryState">
            <summary>
            These are the possible states for an inflater to perform decoding.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.Inflater.DecodeBlocksState">
            <summary>
            These are the possible states for an inflater to perform decoding.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.Inflater.DecodeStoredLength1">
            <summary>
            These are the possible states for an inflater to perform decoding.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.Inflater.DecodeStoredLength2">
            <summary>
            These are the possible states for an inflater to perform decoding.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.Inflater.DecodeStored">
            <summary>
            These are the possible states for an inflater to perform decoding.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.Inflater.DecodeDynamicHeader">
            <summary>
            These are the possible states for an inflater to perform decoding.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.Inflater.DecodeHuffmanState">
            <summary>
            These are the possible states for an inflater to perform decoding.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.Inflater.DecodeHuffmanLengthBits">
            <summary>
            These are the possible states for an inflater to perform decoding.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.Inflater.DecodeHuffmanDistance">
            <summary>
            These are the possible states for an inflater to perform decoding.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.Inflater.DecodeHuffmanDistanceBits">
            <summary>
            These are the possible states for an inflater to perform decoding.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.Inflater.DecodeChecksum">
            <summary>
            These are the possible states for an inflater to perform decoding.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.Inflater.DecodeFinished">
            <summary>
            These are the possible states for an inflater to perform decoding.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.Inflater.CopyLengths">
            <summary>
            Copy lengths for literal codes 257..285
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.Inflater.CopyLengthExtraBits">
            <summary>
            Extra bits for literal codes 257..285
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.Inflater.CopyDistanceOffsets">
            <summary>
            Copy offsets for distance codes 0..29
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.Inflater.CopyDistanceExtraBits">
            <summary>
            Extra bits for distance codes
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.Inflater.mode">
            <summary>
            This variable contains the current state.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.Inflater.readAdler">
            <summary>
            The adler checksum of the dictionary or of the decompressed
            stream, as it is written in the header resp. footer of the
            compressed stream. 
            Only valid if mode is DecodeDictionaryState or DecodeChecksum.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.Inflater.neededBits">
            <summary>
            The number of bits needed to complete the current state.  This
            is valid, if mode is DecodeDictionaryState, DecodeChecksum,
            DecodeHuffmanLengthBits or DecodeHuffmanDistanceBits.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.Inflater.isLastBlock">
            <summary>
            True, if the last block flag was set in the last block of the
            inflated stream.  This means that the stream ends after the
            current block.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.Inflater.totalOut">
            <summary>
            The total number of inflated bytes.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.Inflater.totalIn">
            <summary>
            The total number of bytes set with setInput().  This is not the
            value returned by the TotalIn property, since this also includes the
            unprocessed input.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.Inflater.noHeader">
            <summary>
            This variable stores the noHeader flag that was given to the
            constructor. True means, that the inflated stream doesn't contain a
            Zlib header or footer.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Inflaters.Inflater.#ctor">
            <summary>
            Creates a new inflater or RFC1951 decompressor
            RFC1950/Zlib headers and footers will be expected in the input data
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Inflaters.Inflater.#ctor(System.Boolean)">
            <summary>
            Creates a new inflater.
            </summary>
            <param name="noHeader">
            True if no RFC1950/Zlib header and footer fields are expected in the
            input data. This is used for GZIPed/Zipped input. For compatibility
            with Sun JDK you should provide one byte of input more than needed in
            this case.
            </param>
        </member>
        <member name="M:Delta.Utilities.Compression.Inflaters.Inflater.Reset">
            <summary>
            Resets the inflater so that a new stream can be decompressed.
            All pending input and output will be discarded.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Inflaters.Inflater.DecodeHeader">
            <summary>
            Decodes a zlib/RFC1950 header.
            </summary>
            <returns>False if more input is needed.</returns>
            <exception cref="T:Delta.Utilities.Compression.CompressionException">The header is invalid.
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Inflaters.Inflater.DecodeDict">
            <summary>
            Decodes the dictionary checksum after the deflate header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Inflaters.Inflater.DecodeHuffman">
            <summary>
            Decodes the huffman encoded symbols in the input stream.
            </summary>
            <returns>
            false if more input is needed, true if output window is
            full or the current block ends.
            </returns>
            <exception cref="T:Delta.Utilities.Compression.CompressionException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Inflaters.Inflater.DecodeChksum">
            <summary>
            Decodes the adler checksum after the deflate stream.
            </summary>
            <returns>False if more input is needed.</returns>
            <exception cref="T:Delta.Utilities.Compression.CompressionException">If checksum doesn't match.
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Inflaters.Inflater.Decode">
            <summary>
            Decodes the deflated stream.
            </summary>
            <returns>False if more input is needed, or if finished.</returns>
            <exception cref="T:Delta.Utilities.Compression.CompressionException">If deflated stream is invalid.
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Inflaters.Inflater.DecodeLastBlockType(System.Int32)">
            <summary>
            Decode last block type
            </summary>
            <param name="type">Type</param>
        </member>
        <member name="M:Delta.Utilities.Compression.Inflaters.Inflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
        </member>
        <member name="M:Delta.Utilities.Compression.Inflaters.Inflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">The dictionary.</param>
            <param name="offset">The offset into buffer where the dictionary
            starts.</param>
            <param name="len">The length of the dictionary.</param>
            <exception cref="T:System.InvalidOperationException">
            No dictionary is needed.
            </exception>
            <exception cref="T:Delta.Utilities.Compression.CompressionException">
            The adler checksum for the buffer is invalid
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Inflaters.Inflater.SetInput(System.Byte[])">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">The input buffer.</param>
        </member>
        <member name="M:Delta.Utilities.Compression.Inflaters.Inflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">
            The source of input data
            </param>
            <param name="offset">
            The offset into buffer where the input starts.
            </param>
            <param name="length">
            The number of bytes of input to use.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No input is needed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The off and/or len are wrong.
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Inflaters.Inflater.Inflate(System.Byte[])">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether needsDictionary(),
            needsInput() or finished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buffer">The output buffer.</param>
            <returns>
            the number of bytes written to the buffer, 0 if no further
            output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if buf has length 0.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Inflaters.Inflater.Inflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether needsDictionary(),
            needsInput() or finished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buffer">The output buffer.</param>
            <param name="offset">The offset into buffer where the output should
            start.</param>
            <param name="len">The maximum length of the output.</param>
            <returns>The number of bytes written to the buffer, 0 if no further
            output can be produced.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if len is &lt;= 0.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if the offset and/or len are wrong.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="P:Delta.Utilities.Compression.Inflaters.Inflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method also returns true when the stream is finished.
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.Inflaters.Inflater.IsNeedingDictionary">
            <summary>
            Returns true, if a preset dictionary is needed to inflate the input.
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.Inflaters.Inflater.IsFinished">
            <summary>
            Returns true, if the inflater has finished.  This means, that no
            input is needed and no output can be produced.
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.Inflaters.Inflater.Adler">
            <summary>
            Gets the adler checksum.  This is either the checksum of all
            uncompressed bytes returned by inflate(), or if needsDictionary()
            returns true (and thus no output was yet produced) this is the
            adler checksum of the expected dictionary.
            </summary>
            <returns>
            the adler checksum.
            </returns>
        </member>
        <member name="P:Delta.Utilities.Compression.Inflaters.Inflater.TotalOut">
            <summary>
            Gets the total number of output bytes returned by inflate().
            </summary>
            <returns>
            the total number of output bytes.
            </returns>
        </member>
        <member name="P:Delta.Utilities.Compression.Inflaters.Inflater.TotalIn">
            <summary>
            Gets the total number of processed compressed input bytes.
            </summary>
            <returns>
            The total number of bytes of processed input bytes.
            </returns>
        </member>
        <member name="P:Delta.Utilities.Compression.Inflaters.Inflater.RemainingInput">
            <summary>
            Gets the number of unprocessed input bytes.  Useful, if the end of the
            stream is reached and you want to further process the bytes after
            the deflate stream.
            </summary>
            <returns>
            The number of bytes of the input which have not been processed.
            </returns>
        </member>
        <member name="T:Delta.Utilities.Compression.GeneralBitFlags">
            <summary>
            Defines the contents of the general bit flags field for an archive entry.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.GeneralBitFlags.Encrypted">
            <summary>
            If set indicates that the file is encrypted
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.GeneralBitFlags.Method">
            <summary>
            Two bits defining the compression method (only for Method 6 Imploding
            and 8,9 Deflating)
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.GeneralBitFlags.Descriptor">
            <summary>
            If set a trailing data descriptor is appended to the entry data
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.GeneralBitFlags.Reserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.GeneralBitFlags.Patched">
            <summary>
            If set indicates the file contains Pkzip compressed patched data.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.GeneralBitFlags.StrongEncryption">
            <summary>
            If set strong encryption has been used for this entry.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.GeneralBitFlags.EnhancedCompress">
            <summary>
            Reserved by PKWare for enhanced compression.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.GeneralBitFlags.HeaderMasked">
            <summary>
            If set indicates that values in the local header are masked to hide
            their actual values. Used when encrypting the central directory
            contents.
            </summary>
        </member>
        <member name="T:Delta.Utilities.Compression.Checksums.Adler32">
            <summary>
            Computes Adler32 checksum for a stream of data. An Adler32
            checksum is not as reliable as a CRC32 checksum, but a lot faster to
            compute.
            </summary>
            <remarks>
            The specification for Adler32 may be found in RFC 1950.
            ZLIB Compressed Data Format Specification version 3.3)
            
            From that document:
            
                 "ADLER32 (Adler-32 checksum)
                  This contains a checksum value of the uncompressed data
                  (excluding any dictionary data) computed according to Adler-32
                  algorithm. This algorithm is a 32-bit extension and improvement
                  of the Fletcher algorithm, used in the ITU-T X.224 / ISO 8073
                  standard.
            
                  Adler-32 is composed of two sums accumulated per byte: s1 is
                  the sum of all bytes, s2 is the sum of all s1 values. Both sums
                  are done modulo 65521. s1 is initialized to 1, s2 to zero.  The
                  Adler-32 checksum is stored as s2*65536 + s1 in most-
                  significant-byte first (network) order."
            
             "8.2. The Adler-32 algorithm
            
               The Adler-32 algorithm is much faster than the CRC32 algorithm yet
               still provides an extremely low probability of undetected errors.
            
               The modulo on unsigned long accumulators can be delayed for 5552
               bytes, so the modulo operation time is negligible.  If the bytes
               are a, b, c, the second sum is 3a + 2b + c + 3, and so is position
               and order sensitive, unlike the first sum, which is just a
               checksum.  That 65521 is prime is important to avoid a possible
               large class of two-byte errors that leave the check unchanged.
               (The Fletcher checksum uses 255, which is not prime and which also
               makes the Fletcher check insensitive to single byte changes 0 -
               255.)
            
               The sum s1 is initialized to 1 instead of zero to make the length
               of the sequence part of s2, so that the length does not have to be
               checked separately. (Any sequence of zeroes has a Fletcher
               checksum of zero.)"
            </remarks>
            <see cref="T:Delta.Utilities.Compression.Streams.InflaterInputStream"/>
            <see cref="T:Delta.Utilities.Compression.Streams.DeflaterOutputStream"/>
        </member>
        <member name="F:Delta.Utilities.Compression.Checksums.Adler32.Base">
            <summary>
            largest prime smaller than 65536
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Checksums.Adler32.checksum">
            <summary>
            Checksum
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Checksums.Adler32.#ctor">
            <summary>
            Creates a new instance of the <code>Adler32</code> class.
            The checksum starts off with a value of 1.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Checksums.Adler32.Reset">
            <summary>
            Resets the Adler32 checksum to the initial value.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Checksums.Adler32.Update(System.Int32)">
            <summary>
            Updates the checksum with the byte b.
            </summary>
            <param name="value">Data value to add.
            The high byte of the int is ignored.</param>
        </member>
        <member name="M:Delta.Utilities.Compression.Checksums.Adler32.Update(System.Byte[])">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">An array of bytes</param>
        </member>
        <member name="M:Delta.Utilities.Compression.Checksums.Adler32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">An array of bytes</param>
            <param name="offset">Start of the data used for this update</param>
            <param name="count">Number of bytes to use for this update</param>
        </member>
        <member name="P:Delta.Utilities.Compression.Checksums.Adler32.Value">
            <summary>
            Returns the Adler32 data checksum computed so far.
            </summary>
        </member>
        <member name="T:Delta.Utilities.Compression.Checksums.Adler32.Adler32Tests">
            <summary>
            Adler 32 tests
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Checksums.Adler32.Adler32Tests.TestAdler32">
            <summary>
            Test adler 32
            </summary>
        </member>
        <member name="T:Delta.Utilities.Compression.ZipConstants">
            <summary>
            This class contains constants used for Zip format files
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.VersionMadeBy">
            <summary>
            The version made by field for entries in the central header when
            created by this library
            </summary>
            <remarks>
            This is also the Zip version for the library when comparing against
            the version required to extract for an entry. See
            <see cref="P:Delta.Utilities.Compression.Streams.ZipInputStream.CanDecompressEntry">
            ZipInputStream.CanDecompressEntry</see>.
            </remarks>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.VersionStrongEncryption">
            <summary>
            The minimum version required to support strong encryption
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.LocalHeader">
            <summary>
            Size of local entry header (excluding variable length fields at end)
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.LocalSignature">
            <summary>
            Signature for local entry header
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.LocalVersion">
            <summary>
            Offset of version to extract in local entry header
            </summary>		
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.LocalFlag">
            <summary>
            Offset of general purpose flags in local entry header
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.LocalHow">
            <summary>
            Offset of compression method in local entry header
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.LocalTime">
            <summary>
            Offset of last mod file time + date in local entry header
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.LocalCrc">
            <summary>
            Offset of crc-32 in local entry header
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.LocalSize">
            <summary>
            Offset of compressed size in local entry header
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.LocalLength">
            <summary>
            Offset of uncompressed size in local entry header
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.LocalName">
            <summary>
            Offset of file name length in local entry header
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.LocalExtension">
            <summary>
            Offset of extra field length in local entry header
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.SpanningSig">
            <summary>
            Signature for spanning entry
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.SpanningTempSig">
            <summary>
            Signature for temporary spanning entry
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.ExternSig">
            <summary>
            Signature for data descriptor
            </summary>
            <remarks>
            This is only used where the length, Crc, or compressed size isn't
            known when the entry is created and the output stream doesnt support
            seeking. The local entry cannot be 'patched' with the correct values
            in this case so the values are recorded after the data prefixed by
            this header, as well as in the central directory.
            </remarks>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.ExternHeader">
            <summary>
            Size of data descriptor
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.ExternCrc">
            <summary>
            Offset of crc-32 in data descriptor
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.ExternSize">
            <summary>
            Offset of compressed size in data descriptor
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.ExternLength">
            <summary>
            Offset of uncompressed length in data descriptor
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.CentralDirectorySig">
            <summary>
            Signature for central header
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.CentralDirectorySig64">
            <summary>
            Signature for Zip64 central file header
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.CentralDigitalSig">
            <summary>
            Central header digitial signature
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.CentralHeader">
            <summary>
            Size of central header entry
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.CentralVem">
            <summary>
            Offset of version made by in central file header
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.CentralVersion">
            <summary>
            Offset of version needed to extract in central file header
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.CentralFlag">
            <summary>
            Offset of general purpose bit flag in central file header
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.CentralHow">
            <summary>
            Offset of compression method in central file header
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.CentralTime">
            <summary>
            Offset of time/date in central file header
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.CentralCrc">
            <summary>
            Offset of crc-32 in central file header
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.CentralSize">
            <summary>
            Offset of compressed size in central file header
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.CentralLength">
            <summary>
            Offset of uncompressed size in central file header
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.CentralName">
            <summary>
            Offset of file name length in central file header
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.CentralExtension">
            <summary>
            Offset of extra field length in central file header
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.CentralComment">
            <summary>
            Offset of file comment length in central file header
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.CentralDiskStartNumber">
            <summary>
            Offset of disk start number in central file header
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.CentralAttributes">
            <summary>
            Offset of internal file attributes in central file header
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.CentralExternalAttributes">
            <summary>
            Offset of external file attributes in central file header
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.CentralOffset">
            <summary>
            Offset of relative offset of local header in central file header
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.EndSig">
            <summary>
            End of central directory record signature
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.EndHeader">
            <summary>
            Size of end of central record (excluding variable fields)
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.EndNumberOfDisk">
            <summary>
            Offset of number of this disk
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.EndNumberOfDiskCentralDirectory">
            <summary>
            Offset of number of disk with start of central directory
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.EndEntriesInCentralDirectory">
            <summary>
            Offset of number of entries in the central directory of this disk
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.EndTotalNumberOfEntriesInCentralDirectory">
            <summary>
            Offset of total number of entries in the central directory
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.EndSizeOfCentralDirectory">
            <summary>
            Offset of size of central directory
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.EndOffset">
            <summary>
            Offset of offset of start of central directory with respect to
            starting disk number
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.EndComment">
            <summary>
            Offset of ZIP file comment length
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipConstants.CryptoHeaderSize">
            <summary>
            Size of cryptographic header stored before entry data
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipConstants.ConvertToString(System.Byte[],System.Int32)">
            <summary>
            Convert a portion of a byte array to a string.
            </summary>		
            <param name="data">
            Data to convert to string
            </param>
            <param name="length">
            Number of bytes to convert starting from index 0
            </param>
            <returns>
            data[0]..data[length - 1] converted to a string
            </returns>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipConstants.ConvertToString(System.Byte[])">
            <summary>
            Convert byte array to string
            </summary>
            <param name="data">
            Byte array to convert
            </param>
            <returns>
            <paramref name="data">data</paramref>converted to a string
            </returns>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipConstants.DefaultCodePage">
            <summary>
            Default encoding used for string conversion. 0 gives the default
            system Ansi code page. Dont use unicode encodings if you want to be Zip
            compatible! Using the default code page isnt the full solution
            neccessarily there are many variable factors, codepage 850 is often a
            good choice for European users, however be careful about compatability.
            </summary>
        </member>
        <member name="T:Delta.Utilities.Compression.Streams.StreamManipulator">
             <summary>
             This class allows us to retrieve a specified amount of bits from
             the input buffer, as well as copy big byte blocks.
            
             It uses an int buffer to store up to 31 bits for direct
             manipulation. This guarantees that we can get at least 16 bits,
             but we only need at most 15, so this is all safe.
            
             There are some optimizations in this class, for example, you must
             never peek more then 8 bits more than needed, and you must first
             peek bits before you may drop them. This is not a general purpose
             class but optimized for the behavior of the Inflater.
             </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.StreamManipulator.window">
            <summary>
            Window
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.StreamManipulator.windowStart">
            <summary>
            Window start
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.StreamManipulator.windowEnd">
            <summary>
            Window end
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.StreamManipulator.buffer">
            <summary>
            Buffer
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.StreamManipulator.bitsInBuffer">
            <summary>
            Bits in buffer
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.StreamManipulator.PeekBits(System.Int32)">
            <summary>
            Get the next n bits but don't increase input pointer.  n must be
            less or equal 16 and if you if this call succeeds, you must drop
            at least n-8 bits in the next call.
            </summary>
            <returns>
            the value of the bits, or -1 if not enough bits available.  */
            </returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.StreamManipulator.DropBits(System.Int32)">
            <summary>
            Drops the next n bits from the input.  You should have called peekBits
            with a bigger or equal n before, to make sure that enough bits are in
            the bit buffer.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.StreamManipulator.GetBits(System.Int32)">
            <summary>
            Gets the next n bits and increases input pointer.  This is equivalent
            to peekBits followed by dropBits, except for correct error handling.
            </summary>
            <returns>
            the value of the bits, or -1 if not enough bits available.
            </returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.StreamManipulator.SkipToByteBoundary">
            <summary>
            Skips to the next byte boundary.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.StreamManipulator.CopyBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies length bytes from input buffer to output buffer starting
            at output[offset].  You have to make sure, that the buffer is
            byte aligned.  If not enough bytes are available, copies fewer
            bytes.
            </summary>
            <param name="output">The buffer.</param>
            <param name="offset">The offset in the buffer.</param>
            <param name="length">the length to copy, 0 is allowed.</param>
            <returns>The number of bytes copied, 0 if no byte is available.
            </returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.StreamManipulator.Reset">
            <summary>
            Reset
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.StreamManipulator.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set input
            </summary>
            <param name="buf">Buf</param>
            <param name="off">Off</param>
            <param name="len">Len</param>
        </member>
        <member name="P:Delta.Utilities.Compression.Streams.StreamManipulator.AvailableBits">
            <summary>
            Gets the number of bits available in the bit buffer.  This must be
            only called when a previous peekBits() returned -1.
            </summary>
            <returns>The number of bits available.</returns>
        </member>
        <member name="P:Delta.Utilities.Compression.Streams.StreamManipulator.AvailableBytes">
            <summary>
            Gets the number of bytes available.
            </summary>
            <returns>The number of bytes available.</returns>
        </member>
        <member name="P:Delta.Utilities.Compression.Streams.StreamManipulator.IsNeedingInput">
            <summary>
            Is needing input
            </summary>
            <returns>
            True if we need input, false if the start window is already at the end.
            </returns>
        </member>
        <member name="T:Delta.Utilities.Compression.Streams.InflaterInputBuffer">
            <summary>
            An input buffer customized for use by <see cref="T:Delta.Utilities.Compression.Streams.InflaterInputStream"/>
            </summary>
            <remarks>
            The buffer supports decryption of incoming data.
            </remarks>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.InflaterInputBuffer.rawLength">
            <remarks>
            The raw length
            </remarks>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.InflaterInputBuffer.rawData">
            <remarks>
            The data inside the buffer
            </remarks>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.InflaterInputBuffer.clearTextLength">
            <remarks>
            Clear Text Length
            </remarks>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.InflaterInputBuffer.clearText">
            <remarks>
            The clear Text
            </remarks>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.InflaterInputBuffer.internalClearText">
            <remarks>
            Internal Clear Text
            </remarks>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.InflaterInputBuffer.available">
            <remarks>
            Available
            </remarks>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.InflaterInputBuffer.cryptoTransform">
            <remarks>
            cryptoTransform
            </remarks>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.InflaterInputBuffer.inputStream">
            <remarks>
            The input stream
            </remarks>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.InflaterInputBuffer.#ctor(System.IO.Stream)">
            <summary>
            Initialise a new instance of <see cref="T:Delta.Utilities.Compression.Streams.InflaterInputBuffer"/>
            </summary>
            <param name="stream">The stream to buffer.</param>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.InflaterInputBuffer.GetRawData">
            <summary>
            Get the contents of the raw data buffer.
            </summary>
            <remarks>This may contain encrypted data.</remarks>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.InflaterInputBuffer.GetClearText">
            <summary>
            Get the contents of the clear text buffer.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.InflaterInputBuffer.SetInflaterInput(Delta.Utilities.Compression.Inflaters.Inflater)">
            <summary>
            Call <see cref="M:Delta.Utilities.Compression.Inflaters.Inflater.SetInput(System.Byte[])"/> passing the current clear
            text buffer contents.
            </summary>
            <param name="inflater">The inflater to set input for.</param>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.InflaterInputBuffer.Fill">
            <summary>
            Fill the buffer from the underlying input stream.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.InflaterInputBuffer.ReadRawBuffer(System.Byte[])">
            <summary>
            Read a buffer directly from the input stream
            </summary>
            <param name="buffer">The buffer to fill</param>
            <returns>Returns the number of bytes read.</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.InflaterInputBuffer.ReadRawBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a buffer directly from the input stream
            </summary>
            <param name="outBuffer">The buffer to read into</param>
            <param name="offset">The offset to start reading data into.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>Returns the number of bytes read.</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.InflaterInputBuffer.ReadClearTextBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read clear text data from the input stream.
            </summary>
            <param name="outBuffer">The buffer to add data to.</param>
            <param name="offset">The offset to start adding data at.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>Returns the number of bytes actually read.</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.InflaterInputBuffer.ReadLeByte">
            <summary>
            Read a byte from the input stream.
            </summary>
            <returns>Returns the byte read.</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.InflaterInputBuffer.ReadLeShort">
            <summary>
            Read an unsigned short in little endian byte order.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.InflaterInputBuffer.ReadLeInt">
            <summary>
            Read an int in little endian byte order.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.InflaterInputBuffer.ReadLeLong">
            <summary>
            Read an int baseInputStream little endian byte order.
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.Streams.InflaterInputBuffer.RawLength">
            <summary>
            Get the length of bytes bytes in the <see cref="M:Delta.Utilities.Compression.Streams.InflaterInputBuffer.GetRawData"/>
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.Streams.InflaterInputBuffer.ClearTextLength">
            <summary>
            Get the number of useable bytes in <see cref="M:Delta.Utilities.Compression.Streams.InflaterInputBuffer.GetClearText"/>
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.Streams.InflaterInputBuffer.Available">
            <summary>
            Get/set the number of bytes available
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.Streams.InflaterInputBuffer.CryptoTransform">
            <summary>
            Get/set the <see cref="T:System.Security.Cryptography.ICryptoTransform"/> to apply to any data.
            </summary>
            <remarks>Set this value to null to have no transform applied.</remarks>
        </member>
        <member name="T:Delta.Utilities.Compression.PendingBuffer">
            <summary>
            This class is general purpose class for writing data to a buffer.
            It allows you to write bits as well as bytes.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.PendingBuffer.buf">
            <summary>
            Buffer used for pending data.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.PendingBuffer.start">
            <summary>
            Start
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.PendingBuffer.end">
            <summary>
            End
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.PendingBuffer.bits">
            <summary>
            Bits
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.PendingBuffer.bitCount">
            <summary>
            Bit count
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.PendingBuffer.#ctor">
            <summary>
            Create pending buffer
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.PendingBuffer.#ctor(System.Int32)">
            <summary>
            Create pending buffer
            </summary>
            <param name="bufsize">Bufsize</param>
        </member>
        <member name="M:Delta.Utilities.Compression.PendingBuffer.Reset">
            <summary>
            Reset
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.PendingBuffer.WriteByte(System.Int32)">
            <summary>
            Write byte
            </summary>
            <param name="b">B</param>
        </member>
        <member name="M:Delta.Utilities.Compression.PendingBuffer.WriteShort(System.Int32)">
            <summary>
            Write short
            </summary>
            <param name="s">S</param>
        </member>
        <member name="M:Delta.Utilities.Compression.PendingBuffer.WriteInt(System.Int32)">
            <summary>
            Write int
            </summary>
            <param name="s">S</param>
        </member>
        <member name="M:Delta.Utilities.Compression.PendingBuffer.WriteBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write block
            </summary>
            <param name="block">Block</param>
            <param name="offset">Offset</param>
            <param name="len">Len</param>
        </member>
        <member name="M:Delta.Utilities.Compression.PendingBuffer.AlignToByte">
            <summary>
            Align to byte
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.PendingBuffer.WriteBits(System.Int32,System.Int32)">
            <summary>
            Write bits
            </summary>
            <param name="b">B</param>
            <param name="count">Count</param>
        </member>
        <member name="M:Delta.Utilities.Compression.PendingBuffer.WriteShortMsb(System.Int32)">
            <summary>
            Write short Msb
            </summary>
            <param name="s">S</param>
        </member>
        <member name="M:Delta.Utilities.Compression.PendingBuffer.Flush(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Flushes the pending buffer into the given output array.  If the
            output array is to small, only a partial flush is done.
            </summary>
            <param name="output">Output array</param>
            <param name="offset">Offset into output array</param>
            <param name="length">Length the maximum number of bytes to store
            </param>
            <exception name="ArgumentOutOfRangeException">
            IndexOutOfBoundsException if offset or length are invalid.</exception>
        </member>
        <member name="M:Delta.Utilities.Compression.PendingBuffer.ToByteArray">
            <summary>
            To byte array
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.PendingBuffer.BitCount">
            <summary>
            Bit count
            </summary>
            <returns>Int</returns>
        </member>
        <member name="P:Delta.Utilities.Compression.PendingBuffer.IsFlushed">
            <summary>
            Is this buffer already flushed?
            </summary>
            <returns>True if we have flushed to the end already.</returns>
        </member>
        <member name="T:Delta.Utilities.Compression.Streams.DeflaterOutputStream">
            <summary>
            A special stream deflating or compressing the bytes that are
            written to it. It uses a Deflater to perform actual deflating.<br/>
            Authors of the original java version: Tom Tromey, Jochen Hoenicke 
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.DeflaterOutputStream.buffer">
            <summary>
            This buffer is used temporarily to retrieve the bytes from the
            deflater and write them to the underlying output stream.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.DeflaterOutputStream.deflater">
            <summary>
            The deflater which is used to deflate the stream.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.DeflaterOutputStream.baseOutputStream">
            <summary>
            Base stream the deflater depends on.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.DeflaterOutputStream.isClosed">
            <summary>
            Is closed
            </summary>
            <returns>False</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.DeflaterOutputStream.isStreamOwner">
            <summary>
            Is stream owner
            </summary>
            <returns>True</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.DeflaterOutputStream.password">
            <summary>
            TODO:  Refactor this code.  The presence of Zip specific code in this
            low level class is wrong
            </summary>
            <returns>Null</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.DeflaterOutputStream.keys">
            <summary>
            Keys
            </summary>
            <returns>Null</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new DeflaterOutputStream with a default Deflater and default
            buffer size.
            </summary>
            <param name="setBaseOutputStream">
            the output stream where deflated output should be written.
            </param>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream,Delta.Utilities.Compression.Deflaters.Deflater)">
            <summary>
            Creates a new DeflaterOutputStream with the given Deflater and
            default buffer size.
            </summary>
            <param name="setBaseOutputStream">
            the output stream where deflated output should be written.
            </param>
            <param name="setDeflater">
            the underlying deflater.
            </param>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream,Delta.Utilities.Compression.Deflaters.Deflater,System.Int32)">
            <summary>
            Creates a new DeflaterOutputStream with the given Deflater and
            buffer size.
            </summary>
            <param name="baseOutputStream">
            The output stream where deflated output is written.
            </param>
            <param name="deflater">
            The underlying deflater to use
            </param>
            <param name="bufsize">
            The buffer size to use when deflating
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            bufsize is less than or equal to zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            baseOutputStream does not support writing
            </exception>
            <exception cref="T:System.ArgumentNullException">
            deflater instance is null
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.DeflaterOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of this stream to the given value.
            Not supported by this class!
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.DeflaterOutputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value.
            Not supported by this class!
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.DeflaterOutputStream.ReadByte">
            <summary>
            Read a byte from stream advancing position by one
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.DeflaterOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of bytes from stream
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.DeflaterOutputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous reads are not supported a NotSupportedException is
            always thrown
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.DeflaterOutputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous writes arent supported, a NotSupportedException is always
            thrown.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.DeflaterOutputStream.Flush">
            <summary>
            Flushes the stream by calling flush() on the deflater and then
            on the underlying stream.  This ensures that all bytes are
            flushed.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.DeflaterOutputStream.Finish">
            <summary>
            Finishes the stream by calling finish() on the deflater. 
            </summary>
            <exception cref="T:Delta.Utilities.Compression.CompressionException">
            Not all input is deflated
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.DeflaterOutputStream.Close">
            <summary>
            Calls finish() and closes the underlying
            stream when <see cref="P:Delta.Utilities.Compression.Streams.DeflaterOutputStream.IsStreamOwner"></see> is true.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.DeflaterOutputStream.WriteByte(System.Byte)">
            <summary>
            Writes a single byte to the compressed output stream.
            </summary>
            <param name="value">The byte value.</param>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.DeflaterOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes from an array to the compressed stream.
            </summary>
            <param name="buffer">The byte array</param>
            <param name="offset">The offset into the byte array where to start.
            </param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.DeflaterOutputStream.Deflate">
            <summary>
            Deflates everything in the input buffers. This will call
            <code>def.deflate()</code> until all bytes from the input buffers
            are processed.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.DeflaterOutputStream.EncryptByte">
            <summary>
            Encrypt a single byte 
            </summary>
            <returns>
            The encrypted value
            </returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.DeflaterOutputStream.EncryptBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypt a block of data
            </summary>
            <param name="buffer">
            Data to encrypt.  NOTE the original contents of the buffer are lost
            </param>
            <param name="offset">
            Offset of first byte in buffer to encrypt
            </param>
            <param name="length">
            Number of bytes in buffer to encrypt
            </param>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.DeflaterOutputStream.InitializePassword(System.String)">
            <summary>
            Initializes encryption keys based on given password
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.DeflaterOutputStream.UpdateKeys(System.Byte)">
            <summary>
            Update encryption keys 
            </summary>		
        </member>
        <member name="P:Delta.Utilities.Compression.Streams.DeflaterOutputStream.Length">
            <summary>
            Get current length of stream.
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.Streams.DeflaterOutputStream.Position">
            <summary>
            The current position within the stream. If trying to change position,
            this property throws a NotSupportedExceptionNotSupportedException.
            </summary>
            <exception cref="T:System.NotSupportedException">
            Any attempt to set position
            </exception>
        </member>
        <member name="P:Delta.Utilities.Compression.Streams.DeflaterOutputStream.CanRead">
            <summary>
            Gets value indicating stream can be read from
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.Streams.DeflaterOutputStream.CanSeek">
            <summary>
            Gets a value indicating if seeking is supported for this stream.
            This property always returns false
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.Streams.DeflaterOutputStream.CanWrite">
            <summary>
            Get value indicating if this stream supports writing.
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.Streams.DeflaterOutputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of underlying stream.
            When the flag is true <see cref="M:Delta.Utilities.Compression.Streams.DeflaterOutputStream.Close"></see> will close the
            underlying stream also.
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.Streams.DeflaterOutputStream.CanPatchEntries">
            <summary>
            Allows client to determine if an entry can be patched after its added.
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.Streams.DeflaterOutputStream.Password">
            <summary>
            Get/set the password used for encryption.
            When null no encryption is performed.
            </summary>
        </member>
        <member name="T:Delta.Utilities.Compression.Deflaters.DeflaterEngine">
             <summary>
             Low level compression engine for deflate algorithm which uses a
             32K sliding window with secondary compression from
             Huffman/Shannon-Fano codes.
             </summary>
             <remarks>
             DEFLATE ALGORITHM:
            
             The uncompressed stream is inserted into the window array.  When
             the window array is full the first half is thrown away and the
             second half is copied to the beginning.
            
             The head array is a hash table.  Three characters build a hash value
             and they the value points to the corresponding index in window of 
             the last string with this hash.  The prev array implements a
             linked list of matches with the same hash: prev[index &amp; WMask] points
             to the previous index with the same hash.
             </remarks>
        </member>
        <member name="T:Delta.Utilities.Compression.Deflaters.DeflaterConstants">
            <summary>
            This class contains constants used for deflation.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterConstants.StoredBlock">
            <summary>
            Written to Zip file to identify a stored block
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterConstants.StaticTrees">
            <summary>
            Identifies static tree in Zip file
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterConstants.DynamicTrees">
            <summary>
            Identifies dynamic tree in Zip file
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterConstants.PresetDictionary">
            <summary>
            Header flag indicating a preset dictionary for deflation
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterConstants.DefaultMemoryLevel">
            <summary>
            Sets internal buffer sizes for Huffman encoding
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterConstants.MaxMatch">
            <summary>
            Max match. Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterConstants.MinMatch">
            <summary>
            Min match. Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterConstants.MaxWBits">
            <summary>
            Max WBits for WSize. Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterConstants.WSize">
            <summary>
            WSize. Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterConstants.WMask">
            <summary>
            WMask. Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterConstants.HashBits">
            <summary>
            Hash bits. Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterConstants.HashSize">
            <summary>
            Hash size. Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterConstants.HashMask">
            <summary>
            Hash mask. Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterConstants.HashShift">
            <summary>
            Hash shift. Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterConstants.MinLookAhead">
            <summary>
            Min look ahead. Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterConstants.MaxDistance">
            <summary>
            Max distance. Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterConstants.PendingBufferSize">
            <summary>
            Pending buffer size. Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterConstants.CompressionDeflateStored">
            <summary>
            Compression deflate stored. Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterConstants.CompressionDeflateFast">
            <summary>
            Compression deflate fast. Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterConstants.CompressionDeflateSlow">
            <summary>
            Compression deflate slow. Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterConstants.MaxBlockSize">
            <summary>
            Max block size. Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterConstants.GoodLength">
            <summary>
            Good length. Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterConstants.MaxLazy">
            <summary>
            Max lazy. Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterConstants.NiceLength">
            <summary>
            Nice length. Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterConstants.MaxChain">
            <summary>
            Max chain. Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterConstants.CompressionFunction">
            <summary>
            Compression function. Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterEngine.LengthTooFar">
            <summary>
            Length too far, reached limit at 4096 bytes.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterEngine.ins_h">
            <summary>
            Ins _h
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterEngine.head">
            <summary>
            Hashtable, hashing three characters to an index for window, so
            that window[index]..window[index+2] have this hash code.  
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterEngine.prev">
            <summary>
            <code>prev[index &amp; WMask]</code> points to the previous index that
            has the same hash code as the string starting at index.
            This way entries with the same hash code are in a linked list.
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterEngine.matchStart">
            <summary>
            Match Start
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterEngine.matchLen">
            <summary>
            Match Length
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterEngine.prevAvailable">
            <summary>
            Prev Available
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterEngine.blockStart">
            <summary>
            Block Start
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterEngine.strstart">
            <summary>
            String Start
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterEngine.lookahead">
            <summary>
            lookahead is the number of characters starting at strstart in
            window that are valid.
            So window[strstart] until window[strstart+lookahead-1] are valid
            characters.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterEngine.window">
            <summary>
            This array contains the part of the uncompressed stream that 
            is of relevance.  The current character is indexed by strstart.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterEngine.strategy">
            <summary>
            Deflate Strategy
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterEngine.max_chain">
            <summary>
            Points to the current character in the window.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterEngine.max_lazy">
            <summary>
            Points to the current character in the window.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterEngine.niceLength">
            <summary>
            Points to the current character in the window.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterEngine.goodLength">
            <summary>
            Points to the current character in the window.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterEngine.comprFunc">
            <summary>
            The current compression function.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterEngine.inputBuf">
            <summary>
            The input data for compression.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterEngine.totalIn">
            <summary>
            The total bytes of input read.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterEngine.inputOff">
            <summary>
            The offset into inputBuf, where input data starts.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterEngine.inputEnd">
            <summary>
            The end offset of the input data.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterEngine.pending">
            <summary>
            Pending
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterEngine.huffman">
            <summary>
            Huffman
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterEngine.adler">
            <summary>
            The adler checksum
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterEngine.#ctor(Delta.Utilities.Compression.Deflaters.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="setPending">
            Pending buffer to use
            </param>>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterEngine.Reset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterEngine.ResetAdler">
            <summary>
            Reset Adler checksum
            </summary>		
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterEngine.SetLevel(System.Int32)">
            <summary>
            Set the deflate level (0-9)
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterEngine.FillWindow">
            <summary>
            Fill the window
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterEngine.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set compression dictionary
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterEngine.Deflate(System.Boolean,System.Boolean)">
            <summary>
            Deflate drives actual compression of data
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets input data to be deflated.
            Should only be called when <code>NeedsInput()</code> returns true.
            </summary>
            <param name="buf">The buffer containing input data.</param>
            <param name="off">The index of the first byte of data.</param>
            <param name="len">The number of bytes of data to use as input.</param>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterEngine.NeedsInput">
            <summary>
            Return true if input is needed via <see cref="M:Delta.Utilities.Compression.Deflaters.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">SetInput</see>
            </summary>		
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterEngine.UpdateHash">
            <summary>
            Update hash
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterEngine.InsertString">
            <summary>
            Inserts the current string in the head hash and returns the previous
            value for this hash.
            </summary>
            <returns>The previous hash value</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterEngine.SlideWindow">
            <summary>
            Slide window
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterEngine.FindLongestMatch(System.Int32)">
             <summary>
             Find the best (longest) string in the window matching the 
             string starting at strstart.
            
             Preconditions:
             <code>
             strstart + MaxMatch &lt;= window.length.</code>
             </summary>
             <param name="curMatch"></param>
             <returns>True if a match greater than the minimum length is found</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterEngine.DeflateStored(System.Boolean,System.Boolean)">
            <summary>
            Deflate stored
            </summary>
            <param name="flush">Flush</param>
            <param name="finish">Finish</param>
            <returns>
            True if storing succeeded, false if nothing was stored.
            </returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterEngine.DeflateFast(System.Boolean,System.Boolean)">
            <summary>
            Deflate fast
            </summary>
            <param name="flush">Flush</param>
            <param name="finish">Finish</param>
            <returns>
            True if storing succeeded, false if nothing was stored.
            </returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterEngine.DeflateSlow(System.Boolean,System.Boolean)">
            <summary>
            Deflate slow
            </summary>
            <param name="flush">Flush</param>
            <param name="finish">Finish</param>
            <returns>
            True if storing succeeded, false if nothing was stored.
            </returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterEngine.DeflateSlowCheckLookAhead">
            <summary>
            Deflate slow check look ahead
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterEngine.DeflateSlowCheckPreviousMatch(System.Int32,System.Int32)">
            <summary>
            Deflate slow check previous match
            </summary>
            <param name="prevMatch">Prev match</param>
            <param name="prevLen">Prev len</param>
            <returns>Int</returns>
        </member>
        <member name="P:Delta.Utilities.Compression.Deflaters.DeflaterEngine.Adler">
            <summary>
            Get current value of Adler checksum
            </summary>		
        </member>
        <member name="P:Delta.Utilities.Compression.Deflaters.DeflaterEngine.TotalIn">
            <summary>
            Total data processed
            </summary>		
        </member>
        <member name="P:Delta.Utilities.Compression.Deflaters.DeflaterEngine.Strategy">
            <summary>
            Get/set the <see cref="T:Delta.Utilities.Compression.Deflaters.DeflateStrategy">deflate strategy</see>
            </summary>		
        </member>
        <member name="T:Delta.Utilities.Compression.KeysRequiredEventArgs">
            <summary>
            Arguments used with KeysRequiredEvent
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.KeysRequiredEventArgs.fileName">
            <summary>
            File Name
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.KeysRequiredEventArgs.key">
            <summary>
            Key
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.KeysRequiredEventArgs.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:Delta.Utilities.Compression.KeysRequiredEventArgs"></see>
            </summary>
            <param name="name">The name of the file for which keys are required.</param>
        </member>
        <member name="M:Delta.Utilities.Compression.KeysRequiredEventArgs.#ctor(System.String,System.Byte[])">
            <summary>
            Initialise a new instance of <see cref="T:Delta.Utilities.Compression.KeysRequiredEventArgs"></see>
            </summary>
            <param name="name">The name of the file for which keys are required.</param>
            <param name="keyValue">The current key value.</param>
        </member>
        <member name="M:Delta.Utilities.Compression.KeysRequiredEventArgs.GetKey">
            <summary>
            Get key
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.KeysRequiredEventArgs.SetKey(System.Byte[])">
            <summary>
            Set key
            </summary>
            <param name="newKey">New key</param>
        </member>
        <member name="P:Delta.Utilities.Compression.KeysRequiredEventArgs.FileName">
            <summary>
            Get the name of the file for which keys are required.
            </summary>
        </member>
        <member name="T:Delta.Utilities.Compression.ZipFile">
            <summary>
            This class represents a Zip archive.  You can ask for the contained
            entries, or get an input stream for a file entry.  The entry is
            automatically decompressed.
            
            This class is thread safe: You can open input streams for arbitrary
            entries in different threads.
            </summary>
            <example>
            <code>
            using System;
            using System.Text;
            using System.Collections;
            using System.IO;
            
            using Delta.Utilities.Compression;
            
            class MainClass
            {
            	static public void Main(string[] args)
            	{
            		ZipFile zFile = new ZipFile(args[0]);
            		Console.WriteLine("Listing of : " + zFile.Name);
            		Console.WriteLine("");
            		Console.WriteLine("Raw Size    Size      Date     Time     Name");
            		Console.WriteLine("--------  --------  --------  ------  ---------");
            		foreach (ZipEntry e in zFile)
                {
            			DateTime d = e.DateTime;
            			Console.WriteLine("{0, -10}{1, -10}{2}  {3}   {4}",
                    e.Size, e.CompressedSize,
            			  d.ToString("dd-MM-yy"), d.ToString("t"),
            			  e.Name);
            		} // foreach
            	} // Main(args)
            } // class MainClass
            </code>
            </example>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipFile.Open(System.String)">
            <summary>
            Opens a zip file with the given name for reading an returns it or
            'null' if the file is invalid.
            </summary>
            <param name="zipFilePath">Zip file path</param>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipFile.Create(System.String,System.Boolean)">
            <summary>
            Creates a zip file with the given name and returns it or 'null' if the
            file can't be created for some reason.
            </summary>
            <param name="newZipFilePath">New zip file path</param>
            <param name="overrideIfExists">Override if exists</param>
            <returns>Zip file</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipFile.zipOutput">
            <summary>
            Zip output
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipFile.KeysRequired">
            <summary>
            Event handler for handling encryption keys.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipFile.baseStream">
            <summary>
            Base Stream
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipFile.comment">
            <summary>
            File Comment
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipFile.isStreamOwner">
            <summary>
            Get/set a flag indicating if the underlying stream is owned by the
            ZipFile instance. If the flag is true then the stream will be closed
            when <see cref="M:Delta.Utilities.Compression.ZipFile.Close">Close</see> is called.
            </summary>
            <remarks>
            The default value is true in all cases.
            </remarks>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipFile.offsetOfFirstEntry">
            <summary>
            Offset of first entry
            </summary>
            <returns>0</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipFile.entries">
            <summary>
            Entries
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipFile.key">
            <summary>
            The encryption key value.
            </summary>
            <returns>Null</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipFile.#ctor(System.IO.Stream)">
            <summary>
            Opens a Zip file reading the given Stream
            </summary>
            <exception cref="T:Delta.Utilities.Compression.ZipException">
            The file doesn't contain a valid zip archive.
            <para/>
            The stream provided cannot seek.
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipFile.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipFile.GetEnumerator">
            <summary>
            Returns an enumerator for the Zip entries in this Zip file.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipFile.Close">
            <summary>
            Closes the ZipFile. If the stream is
            <see cref="F:Delta.Utilities.Compression.ZipFile.isStreamOwner">owned</see> then this also closes the
            underlying input stream. Once closed, no further instance methods
            should be called.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipFile.FindEntry(System.String,System.Boolean)">
            <summary>
            Return the index of the entry with a matching name
            </summary>
            <param name="searchName">Entry name to find</param>
            <param name="ignoreCase">If true the comparison is case insensitive
            </param>
            <returns>The index position of the matching entry or -1 if not found
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipFile.GetEntry(System.String)">
            <summary>
            Searches for a zip entry in this archive with the given name.
            String comparisons are case insensitive
            </summary>
            <param name="searchName">
            The name to find. May contain directory components separated by
            slashes ('/').
            </param>
            <returns>
            The zip entry, or null if no entry with that name exists.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipFile.TestArchive(System.Boolean)">
            <summary>
            Test an archive for integrity/validity
            </summary>
            <param name="testData">Perform low level data Crc check</param>
            <returns>true if the test passes, false otherwise</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipFile.GetInputStream(System.Int32)">
            <summary>
            Creates an input stream reading a zip entry
            </summary>
            <param name="entryIndex">The index of the entry to obtain an input
            stream for.</param>
            <returns>
            An input stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The ZipFile has already been closed
            </exception>
            <exception cref="T:Delta.Utilities.Compression.ZipException">
            The compression method for the entry is unknown
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            The entry is not found in the ZipFile
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipFile.OnKeysRequired(System.String)">
            <summary>
            Handles getting of encryption keys when required.
            </summary>
            <param name="fileName">The file for which encryptino keys are required.
            </param>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipFile.ReadEntries">
            <summary>
            Search for and read the central directory of a zip file filling the
            entries array. This is called exactly once by the constructors.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:Delta.Utilities.Compression.ZipException">
            The central directory is malformed or cannot be found
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipFile.ReadLeShort">
            <summary>
            Read an unsigned short in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The file ends prematurely
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipFile.ReadLeInt">
            <summary>
            Read an int in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The file ends prematurely
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipFile.LocateBlockWithSignature(System.Int32,System.Int64,System.Int32,System.Int32)">
            <summary>
            NOTE this returns the offset of the first byte after the signature.
            </summary>
            <param name="signature">Signature</param>
            <param name="endLocation">End location</param>
            <param name="minimumBlockSize">Minimum block size</param>
            <param name="maximumVariableData">Maximum variable data</param>
            <returns>Long</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipFile.TestLocalHeader(Delta.Utilities.Compression.ZipEntry,System.Boolean,System.Boolean)">
            <summary>
            Test the local header against that provided from the central directory
            </summary>
            <param name="entry">
            The entry to test against
            </param>
            <param name="fullTest">
            If true be extremely picky about the testing, otherwise be relaxed
            </param>
            <param name="extractTest">
            Apply extra testing to see if the entry can be extracted by the library
            </param>
            <returns>The offset of the entries data in the file</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipFile.CheckLocalHeader(Delta.Utilities.Compression.ZipEntry)">
            <summary>
            Checks, if the local header of the entry at index i matches the
            central directory, and returns the offset to the data.
            </summary>
            <returns>
            The start offset of the (compressed) data.
            </returns>
            <exception cref="T:System.IO.EndOfStreamException">
            The stream ends prematurely
            </exception>
            <exception cref="T:Delta.Utilities.Compression.ZipException">
            The local header signature is invalid, the entry and central header
            file name lengths are different or the local and entry compression
            methods dont match.
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipFile.ReadFully(System.IO.Stream,System.Byte[])">
            <summary>
            Refactor this, its done elsewhere as well
            </summary>
            <param name="stream">S</param>
            <param name="outBuf">Out buf</param>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipFile.CheckClassicPassword(System.Security.Cryptography.CryptoStream,Delta.Utilities.Compression.ZipEntry)">
            <summary>
            Check classic password
            </summary>
            <param name="classicCryptoStream">Classic crypto stream</param>
            <param name="entry">Entry</param>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipFile.CreateAndInitDecryptionStream(System.IO.Stream,Delta.Utilities.Compression.ZipEntry)">
            <summary>
            Create and init decryption stream
            </summary>
            <param name="setBaseStream">Base stream</param>
            <param name="entry">Entry</param>
            <returns>Stream</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipFile.WriteEncryptionHeader(System.IO.Stream,System.Int64)">
            <summary>
            Write encryption header
            </summary>
            <param name="stream">Stream</param>
            <param name="crcValue">Crc value</param>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipFile.CreateAndInitEncryptionStream(System.IO.Stream,Delta.Utilities.Compression.ZipEntry)">
            <summary>
            Create and init encryption stream
            </summary>
            <param name="setBaseStream">Base stream</param>
            <param name="entry">Entry</param>
            <returns>Stream</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipFile.GetOutputStream(Delta.Utilities.Compression.ZipEntry,System.String)">
            <summary>
            Gets an output stream for the specified <see cref="T:Delta.Utilities.Compression.ZipEntry"/>
            </summary>
            <param name="entry">The entry to get an output stream for.</param>
            <param name="fileName"></param>
            <returns>The output stream obtained for the entry.</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipFile.GetInputStream(Delta.Utilities.Compression.ZipEntry)">
            <summary>
            Creates an input stream reading the given zip entry as
            uncompressed data. Normally zip entry should be an entry
            returned by GetEntry().
            </summary>
            <returns>
            the input stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The ZipFile has already been closed
            </exception>
            <exception cref="T:Delta.Utilities.Compression.ZipException">
            The compression method for the entry is unknown
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            The entry is not found in the ZipFile
            </exception>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipFile.ZipFileComment">
            <summary>
            Gets the comment for the zip file.
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipFile.FilePath">
            <summary>
            The path of this zip file.
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipFile.Size">
            <summary>
            Gets the size (in bytes) of this zip file.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipFile.Password">
            <summary>
            Password to be used for encrypting/decrypting files.
            </summary>
            <remarks>Set to null if no password is required.</remarks>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipFile.EntryByIndex(System.Int32)">
            <summary>
            Indexer property for ZipEntries
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipFile.HaveKeys">
            <summary>
            Have keys
            </summary>
            <returns>Does this zip file entry have keys?</returns>
        </member>
        <member name="T:Delta.Utilities.Compression.ZipFile.ZipEntryEnumeration">
            <summary>
            Zip entry enumeration
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipFile.ZipEntryEnumeration.array">
            <summary>
            Array
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipFile.ZipEntryEnumeration.ptr">
            <summary>
            Pointer to entry as an integer
            </summary>
            <returns>-</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipFile.ZipEntryEnumeration.#ctor(Delta.Utilities.Compression.ZipEntry[])">
            <summary>
            Create zip entry enumeration
            </summary>
            <param name="arr">Array</param>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipFile.ZipEntryEnumeration.MoveNext">
            <summary>
            Move next
            </summary>
            <returns>True if there is more to enumerate</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipFile.ZipEntryEnumeration.Reset">
            <summary>
            Reset
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipFile.ZipEntryEnumeration.Current">
            <summary>
            Current
            </summary>
            <returns>Object</returns>
        </member>
        <member name="T:Delta.Utilities.Compression.ZipFile.PartialInputStream">
            <summary>
            Partial input stream
            </summary>
            <returns>Inflater input stream</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipFile.PartialInputStream.baseStream">
            <summary>
            Base stream
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipFile.PartialInputStream.end">
            <summary>
            File position
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipFile.PartialInputStream.filepos">
            <summary>
            File position
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipFile.PartialInputStream.#ctor(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Create partial input stream
            </summary>
            <param name="baseStream">Base stream</param>
            <param name="start">Start</param>
            <param name="len">Len</param>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipFile.PartialInputStream.ReadByte">
            <summary>
            Read a byte from this stream.
            </summary>
            <returns>Returns the byte read or -1 on end of stream.</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipFile.PartialInputStream.Close">
            <summary>
            Close this partial input stream.
            </summary>
            <remarks>
            The underlying stream is not closed.
            Close the parent ZipFile class to do that.
            </remarks>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipFile.PartialInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read
            </summary>
            <param name="b">B</param>
            <param name="off">Off</param>
            <param name="len">Len</param>
            <returns>Int</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipFile.PartialInputStream.SkipBytes(System.Int64)">
            <summary>
            Skip bytes
            </summary>
            <param name="amount">Amount</param>
            <returns>Long</returns>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipFile.PartialInputStream.IsEntryAvailable">
            <summary>
            Available
            </summary>
        </member>
        <member name="T:Delta.Utilities.Compression.ZipFile.KeysRequiredEventHandler">
            <summary>
            Delegate for handling keys/password setting during
            compression / decompression.
            </summary>
        </member>
        <member name="T:Delta.Utilities.Compression.Zip">
            <summary>
            Zip class, which is the main entry point for this namespace. It allows
            you to access compression and decompression features without having
            to create ZipFile or buffers yourself. While this makes things easy for
            simple operations like zipping or decompressing a single file and it is
            also useful for network operations, this class won't help you if you need
            more advanced functionality like saving or loading multiple files. Use
            the ZipFile class instead if you need this kind of access.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Zip.MinimumByteDataLengthToZip">
            <summary>
            Represents the minimum size in bytes that data have to reach. Every
            data that is smaller don't need to pack because the packed size
            wouldn't be notable smaller than the original data. The border where
            the packed data start to be smaller than the original one (in a normal
            use case) is around 500 bytes, but there is also overhead in
            compressing and decompressing data, so it only makes sense for at
            least 1kb of data (e.g. a network message sending a big file).
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Zip.Compress(System.String,System.String,System.Boolean)">
            <summary>
            Compresses a source file to the target file (by the given paths).
            </summary>
            <param name="pathOfSourceFile">Path of source file</param>
            <param name="pathOfTargetFile">Path of target file</param>
            <param name="overrideIfExistsTarget">Override target file if it exists?
            </param>
        </member>
        <member name="M:Delta.Utilities.Compression.Zip.Compress(System.Byte[])">
            <summary>
            Compresses the given data.
            <para />
            Note: The data should be unpacked  by the "Decompress" method.
            </summary>
            <param name="dataToPack">Data to compress</param>
            <returns></returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Zip.Decompress(System.String)">
            <summary>
            Decompress a zipped file (by the given file path).
            </summary>
            <param name="pathOfZipFile">Path of zip file</param>
        </member>
        <member name="M:Delta.Utilities.Compression.Zip.Decompress(System.Byte[])">
            <summary>
            Decompresses the given data.
            <para />
            Note: The packed data should be the result of the "Compress" method.
            </summary>
            <param name="dataToUnpack">Data to decompress</param>
        </member>
        <member name="F:Delta.Utilities.Compression.Zip.entryId">
            <summary>
            Self-counting entry id which is used to identify the compressed data.
            </summary>
        </member>
        <member name="T:Delta.Utilities.Compression.Zip.ZipTests">
            <summary>
            Tests
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Zip.ZipTests.PackAndUnpackTextStream">
            <summary>
            Pack and unpack text stream
            </summary>
        </member>
        <member name="T:Delta.Utilities.Compression.Deflaters.Deflater">
            <summary>
            This is the Deflater class. The deflater class compresses input
            with the deflate algorithm described in RFC 1951.  It has several
            compression levels and three different strategies described below.
            <para />
            This class is <i>not</i> thread safe. This is inherent in the API, due
            to the split of deflate and setInput.
            <para />
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.Deflater.BestCompression">
            <summary>
            The best and slowest compression level.
            This tries to find very long and distant string repetitions.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.Deflater.BestSpeed">
            <summary>
            The worst but fastest compression level.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.Deflater.DefaultCompression">
            <summary>
            The default compression level.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.Deflater.NoCompression">
            <summary>
            This level won't compress at all but output uncompressed blocks.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.Deflater.Deflated">
            <summary>
            The compression method. This is the only method supported so far.
            There is no need to use this constant at all.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.Deflater.IsSetDictionary">
            <summary>
            Is set dictionary
            </summary>
            <returns>0x01</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.Deflater.IsFlushing">
            <summary>
            Is flushing
            </summary>
            <returns>0x04</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.Deflater.IsFinishing">
            <summary>
            Is finishing
            </summary>
            <returns>0x08</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.Deflater.InitializeState">
            <summary>
            Initialize state
            </summary>
            <returns>0x00</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.Deflater.SetDictionaryState">
            <summary>
            Set dictionary state
            </summary>
            <returns>0x01</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.Deflater.BusyState">
            <summary>
            Busy state
            </summary>
            <returns>0x10</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.Deflater.FlushingState">
            <summary>
            Flushing state
            </summary>
            <returns>0x14</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.Deflater.FinishingState">
            <summary>
            Finishing state
            </summary>
            <returns>0x1c</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.Deflater.FinishedState">
            <summary>
            Finished state
            </summary>
            <returns>0x 1e</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.Deflater.ClosedState">
            <summary>
            Closed state
            </summary>
            <returns>0x7f</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.Deflater.level">
            <summary>
            Compression level.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.Deflater.noZlibHeaderOrFooter">
            <summary>
            If true no Zlib/RFC1950 headers or footers are generated
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.Deflater.state">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.Deflater.totalOut">
            <summary>
            The total bytes of output written.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.Deflater.pending">
            <summary>
            The pending output.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.Deflater.engine">
            <summary>
            The deflater engine.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.Deflater.#ctor">
            <summary>
            Creates a new deflater with default compression level.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.Deflater.#ctor(System.Int32)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">The compression level, a value between
            NoCompression and BestCompression, or DefaultCompression.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If level is out of range.</exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.Deflater.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">
            the compression level, a value between NoCompression
            and BestCompression.
            </param>
            <param name="noZlibHeaderOrFooter">
            true, if we should suppress the Zlib/RFC1950 header at the
            beginning and the adler checksum at the end of the output.
            This is useful for the GZIP/PKZIP formats.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If level is out of range.</exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.Deflater.Reset">
            <summary>
            Resets the deflater.  The deflater acts afterwards as if it was
            just created with the same compression level and strategy as it
            had before.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.Deflater.Flush">
            <summary>
            Flushes the current input block.  Further calls to deflate() will
            produce enough output to inflate everything in the current input
            block.  This is not part of Sun's JDK so I have made it package
            private.  It is used by DeflaterOutputStream to implement
            flush().
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.Deflater.Finish">
            <summary>
            Finishes the deflater with the current input block.  It is an error
            to give more input after this method was called. This method must
            be called to force all bytes to be flushed.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.Deflater.SetInput(System.Byte[])">
            <summary>
            Sets the data which should be compressed next.  This should be only
            called when needsInput indicates that more input is needed.
            If you call setInput when needsInput() returns false, the
            previous input that is still pending will be thrown away.
            The given byte array should not be changed, before needsInput()
            returns true again.
            This call is equivalent to <code>setInput(input, 0, input.length)
            </code>.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was finished() or ended().
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.Deflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the data which should be compressed next.  This should be
            only called when needsInput indicates that more input is needed.
            The given byte array should not be changed, before needsInput() returns
            true again.
            </summary>
            <param name="input">The buffer containing the input data.</param>
            <param name="off">The start of the data.</param>
            <param name="len">The length of the data.</param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was finished() or ended() or if previous input is still
            pending.
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.Deflater.SetLevel(System.Int32)">
            <summary>
            Sets the compression level.  There is no guarantee of the exact
            position of the change, but if you call this when needsInput is
            true the change of compression level will occur somewhere near
            before the end of the so far given input.
            </summary>
            <param name="lvl">
            the new compression level.
            </param>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.Deflater.GetLevel">
            <summary>
            Get current compression level
            </summary>
            <returns>Returns the current compression level</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.Deflater.SetStrategy(Delta.Utilities.Compression.Deflaters.DeflateStrategy)">
            <summary>
            Sets the compression strategy. Strategy is one of
            DEFAULT_STRATEGY, HUFFMAN_ONLY and FILTERED.  For the exact
            position where the strategy is changed, the same as for
            setLevel() applies.
            </summary>
            <param name="strategy">
            The new compression strategy.
            </param>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.Deflater.Deflate(System.Byte[])">
            <summary>
            Deflates the current input block with to the given array.
            </summary>
            <param name="output">
            The buffer where compressed data is stored
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            needsInput() or finished() returns true or length is zero.
            </returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.Deflater.Deflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Deflates the current input block to the given array.
            </summary>
            <param name="output">Buffer to store the compressed data.</param>
            <param name="offset">Offset into the output array.</param>
            <param name="length">The maximum number of bytes that may be stored.
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            needsInput() or finished() returns true or length is zero.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If end() was previously called.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If offset and/or length don't match the array length.
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.Deflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            This call is equivalent to <code>setDictionary(dict, 0, dict.Length)
            </code>.
            </summary>
            <param name="dict">
            the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if setInput () or deflate () were already called or another dictionary
            was already set.
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.Deflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            The dictionary is a byte array containing strings that are
            likely to occur in the data which should be compressed. The
            dictionary is not stored in the compressed output, only a
            checksum. To decompress the output you need to supply the same
            dictionary again.
            </summary>
            <param name="dict">
            The dictionary data
            </param>
            <param name="offset">
            An offset into the dictionary.
            </param>
            <param name="length">
            The length of the dictionary data to use
            </param>
            <exception cref="T:System.InvalidOperationException">
            If setInput () or deflate () were already called or another
            dictionary was already set.
            </exception>
        </member>
        <member name="P:Delta.Utilities.Compression.Deflaters.Deflater.Adler">
            <summary>
            Gets the current adler checksum of the data that was processed so far.
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.Deflaters.Deflater.TotalIn">
            <summary>
            Gets the number of input bytes processed so far.
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.Deflaters.Deflater.TotalOut">
            <summary>
            Gets the number of output bytes so far.
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.Deflaters.Deflater.IsFinished">
            <summary>
            Returns true if the stream was finished and no more output bytes
            are available.
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.Deflaters.Deflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method can also return true when the stream
            was finished.
            </summary>
        </member>
        <member name="T:Delta.Utilities.Compression.Streams.ZipOutputStream">
            <summary>
            This is a DeflaterOutputStream that writes the files into a zip
            archive one after another.  It has a special method to start a new
            zip entry.  The zip entries contains information about the file name
            size, compressed size, CRC, etc.
            
            It includes support for Stored and Deflated entries.
            This class is not thread safe.
            </summary>
            <example>This sample shows how to create a zip file
            <code>
            using System;
            using System.IO;
            
            using Delta.Utilities.Compression;
            
            class MainClass
            {
            	public static void Main(string[] args)
            	{
            		string[] filenames = Directory.GetFiles(args[0]);
            		
            		ZipOutputStream s = new ZipOutputStream(File.Create(args[1]));
            		
            		s.SetLevel(5); // 0 - store only to 9 - means best compression
            		
            		foreach (string file in filenames)
                {
            			FileStream fs = File.OpenRead(file);
            			
            			byte[] buffer = new byte[fs.Length];
            			fs.Read(buffer, 0, buffer.Length);
            			
            			ZipEntry entry = new ZipEntry(file);
            			
            			s.PutNextEntry(entry);
            			
            			s.Write(buffer, 0, buffer.Length);
            		} // foreach
            		
            		s.Finish();
            		s.Close();
            	} // Main(args)
            }	// class MainClass
            </code>
            </example>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.ZipOutputStream.entries">
            <summary>
            Entries
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.ZipOutputStream.crc">
            <summary>
            Crc
            </summary>
            <returns>Crc 32</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.ZipOutputStream.curEntry">
            <summary>
            Cur entry
            </summary>
            <returns>Null</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.ZipOutputStream.defaultCompressionLevel">
            <summary>
            Default compression level
            </summary>
            <returns>Default compression</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.ZipOutputStream.curMethod">
            <summary>
            Cur method
            </summary>
            <returns>Deflated</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.ZipOutputStream.size">
            <summary>
            Size
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.ZipOutputStream.currentOffset">
            <summary>
            Offset
            </summary>
            <returns>0</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.ZipOutputStream.zipComment">
            <summary>
            Zip comment
            </summary>
            <returns>Byte</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.ZipOutputStream.patchEntryHeader">
            <summary>
            Patch entry header
            </summary>
            <returns>False</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.ZipOutputStream.headerPatchPos">
            <summary>
            Header patch pos
            </summary>
            <returns>-</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.ZipOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new Zip output stream, writing a zip archive.
            </summary>
            <param name="baseOutputStream">
            The output stream to which the archive contents are written.
            </param>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.ZipOutputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Creates a new Zip output stream, writing a zip archive.
            </summary>
            <param name="baseOutputStream">
            the output stream to which the zip archive is written.
            </param>
            <param name="nowrap">
            Specify this to skip the header and footer for the zip file.
            </param>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.ZipOutputStream.SetComment(System.String)">
            <summary>
            Set the zip file comment.
            </summary>
            <param name="comment">
            The comment string
            </param>
            <exception name ="ArgumentOutOfRangeException">
            Encoding of comment is longer than 0xffff bytes.
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.ZipOutputStream.SetCompressionLevel(System.Int32)">
            <summary>
            Sets default compression level (0=none - 9=best). The new level will be
            activated immediately.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Level specified is not supported.
            </exception>
            <see cref="T:Delta.Utilities.Compression.Deflaters.Deflater"/>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.ZipOutputStream.GetLevel">
            <summary>
            Get the current deflate compression level
            </summary>
            <returns>The current compression level</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.ZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the given buffer to the current entry.
            </summary>
            <exception cref="T:Delta.Utilities.Compression.ZipException">
            Archive size is invalid
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No entry is active.
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.ZipOutputStream.Finish">
            <summary>
            Finishes the stream.  This will write the central directory at the
            end of the zip file and flush the stream.
            </summary>
            <remarks>
            This is automatically called when the stream is closed.
            </remarks>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:Delta.Utilities.Compression.ZipException">
            Comment exceeds the maximum length<br/>
            Entry name exceeds the maximum length
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.ZipOutputStream.WriteLeShort(System.Int32)">
            <summary>
            Write an unsigned short in little endian byte order.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.ZipOutputStream.WriteLeInt(System.Int32)">
            <summary>
            Write an int in little endian byte order.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.ZipOutputStream.WriteLeLong(System.Int64)">
            <summary>
            Write an int in little endian byte order.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.ZipOutputStream.PutNextEntry(Delta.Utilities.Compression.ZipEntry)">
            <summary>
            Starts a new Zip entry. It automatically closes the previous
            entry if present.
            All entry elements bar name are optional, but must be correct if present.
            If the compression method is stored and the output is not patchable
            the compression for that entry is automatically changed to deflate level 0
            </summary>
            <param name="entry">
            the entry.
            </param>
            <exception cref="T:System.IO.IOException">
            if an I/O error occured.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            if stream was finished
            </exception>
            <exception cref="T:Delta.Utilities.Compression.ZipException">
            Too many entries in the Zip file<br/>
            Entry name is too long<br/>
            Finish has already been called<br/>
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.ZipOutputStream.PrepareEntryHeader(Delta.Utilities.Compression.ZipEntry,Delta.Utilities.Compression.CompressionMethod@,System.Int32@,System.Boolean@)">
            <summary>
            Prepare entry header
            </summary>
            <param name="entry">Entry</param>
            <param name="method">Method</param>
            <param name="compressionLevel">Compression level</param>
            <param name="headerInfoAvailable">Header info available</param>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.ZipOutputStream.CloseEntry">
            <summary>
            Closes the current entry, updating header and footer information as
            required
            </summary>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No entry is active.
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.ZipOutputStream.WriteEncryptionHeader(System.Int64)">
            <summary>
            Write encryption header
            </summary>
            <param name="crcValue">Crc value</param>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.ZipOutputStream.AddFile(System.String)">
            <summary>
            Add file to zip stream.
            Will also make sure the header is updated and we store the
            correct crc and file length.
            </summary>
            <param name="filePath">File to store</param>
        </member>
        <member name="P:Delta.Utilities.Compression.Streams.ZipOutputStream.IsFinished">
            <summary>
            Gets boolean indicating central header has been added for this
            archive... No further entries can be added once this has been done.
            </summary>
        </member>
        <member name="T:Delta.Utilities.Compression.ZipEntry">
            <summary>
            This class represents an entry in a zip archive. This can be a file
            or a directory ZipFile and ZipInputStream will give you instances of
            this class as information about the members in an archive.
            ZipOutputStream uses an instance of this class when creating an entry
            in a Zip file.
            <br/>Author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipEntry.CleanName(System.String,System.Boolean)">
            <summary>
            Cleans a name making it conform to Zip file conventions.
            Devices names ('c:\') and UNC share names ('\\server\share') are
            removed and forward slashes ('\') are converted to back slashes ('/').
            </summary>
            <param name="name">Name to clean</param>
            <param name="relativePath">Make names relative if true or absolute if
            false</param>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipEntry.CleanName(System.String)">
            <summary>
            Cleans a name making it conform to Zip file conventions.
            Devices names ('c:\') and UNC share names ('\\server\share') are
            removed and forward slashes ('\') are converted to back slashes ('/').
            Names are made relative by trimming leading slashes which is
            compatible with Windows-XPs built in Zip file handling.
            </summary>
            <param name="name">Name to clean</param>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipEntry.known">
            <summary>
            Bit flags made up of above bits
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipEntry.externalFileAttributes">
            <summary>
            contains external attributes (os dependant)
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipEntry.versionMadeBy">
            <summary>
            Contains host system and version information
            only relevant for central header entries
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipEntry.name">
            <summary>
            Name
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipEntry.size">
            <summary>
            Size
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipEntry.compressedSize">
            <summary>
            Compressed size
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipEntry.versionToExtract">
            <summary>
            Version required to extract (library handles &lt;= 2.0)
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipEntry.crc">
            <summary>
            Crc
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipEntry.dosTime">
            <summary>
            Dos time
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipEntry.method">
            <summary>
            Method
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipEntry.extra">
            <summary>
            Extra
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipEntry.comment">
            <summary>
            Comment
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipEntry.flags">
            <summary>
            general purpose bit flags
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipEntry.zipFileIndex">
            <summary>
            used by ZipFile
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipEntry.offset">
            <summary>
            used by ZipFile and ZipOutputStream
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipEntry.#ctor(System.String)">
            <summary>
            Creates a zip entry with the given name.
            </summary>
            <param name="name">
            The name for this entry. Can include directory components.
            The convention for names is 'unix'  style paths with no device names
            and path elements separated by '/' characters.  This is not enforced
            see <see cref="M:Delta.Utilities.Compression.ZipEntry.CleanName(System.String)">CleanName</see> on how to ensure
            names are valid if this is desired.
            </param>
            <exception cref="T:System.ArgumentNullException">The name passed is null
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipEntry.#ctor(System.String,System.Int32)">
            <summary>
            Creates a zip entry with the given name and version required to extract
            </summary>
            <param name="name">
            The name for this entry. Can include directory components.
            The convention for names is 'unix'  style paths with no device names
            and path elements separated by '/' characters.  This is not enforced
            see <see cref="M:Delta.Utilities.Compression.ZipEntry.CleanName(System.String)">CleanName</see> on how to ensure
            names are valid if this is desired.
            </param>
            <param name="versionRequiredToExtract">
            The minimum 'feature version' required this entry
            </param>
            <exception cref="T:System.ArgumentNullException">The name passed is null
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipEntry.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes an entry with the given name and made by information
            </summary>
            <param name="setName">Name for this entry</param>
            <param name="setMadeByInfo">Version and HostSystem Information</param>
            <param name="setVersionRequiredToExtract">Minimum required zip feature
            version required to extract this entry</param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            versionRequiredToExtract should be 0 (auto-calculate) or &gt; 10
            </exception>
            <remarks>
            This constructor is used by the ZipFile class when reading from the
            central header. It is not generally useful, use the constructor
            specifying the name only.
            </remarks>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipEntry.#ctor">
            <summary>
            Can be used for the "Load" method (after saving) or to create a clone.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipEntry.GetExtraData">
            <summary>
            Get extra data
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipEntry.SetExtraData(System.Byte[])">
            <summary>
            Set extra data
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipEntry.Clone">
            <summary>
            Creates a copy of this zip entry.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipEntry.ToString">
            <summary>
            Gets the string representation of this ZipEntry.
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipEntry.IsCrypted">
            <summary>
            Get/Set flag indicating if entry is encrypted.
            A simple helper routine to aid interpretation of
            <see cref="P:Delta.Utilities.Compression.ZipEntry.Flags">flags</see>
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipEntry.Flags">
            <summary>
            Get/Set general purpose bit flag for entry
            </summary>
            <remarks>
            General purpose bit flag<br/>
            Bit 0: If set, indicates the file is encrypted<br/>
            Bit 1-2 Only used for compression type 6 Imploding, and 8, 9
            deflating<br/>
            Imploding:<br/>
            Bit 1 if set indicates an 8K sliding dictionary was used.
            If clear a 4k dictionary was used<br/>
            Bit 2 if set indicates 3 Shannon-Fanno trees were used to encode the
            sliding dictionary, 2 otherwise<br/>
            <br/>
            Deflating:<br/>
              Bit 2    Bit 1<br/>
                0        0       Normal compression was used<br/>
                0        1       Maximum compression was used<br/>
                1        0       Fast compression was used<br/>
                1        1       Super fast compression was used<br/>
            <br/>
            Bit 3: If set, the fields crc-32, compressed size
            and uncompressed size are were not able to be written during zip file
            creation. The correct values are held in a data descriptor immediately
            following the compressed data. <br/>
            Bit 4: Reserved for use by PKZIP for enhanced deflating<br/>
            Bit 5: If set indicates the file contains compressed patch data<br/>
            Bit 6: If set indicates strong encryption was used.<br/>
            Bit 7-15: Unused or reserved<br/>
            </remarks>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipEntry.ZipFileIndex">
            <summary>
            Get/Set index of this entry in Zip file
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipEntry.Offset">
            <summary>
            Get/set offset for use in central header
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipEntry.ExternalFileAttributes">
            <summary>
            Get/Set external file attributes as an integer.
            The values of this are operating system dependant see
            <see cref="P:Delta.Utilities.Compression.ZipEntry.HostSystemId">HostSystem</see> for details
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipEntry.VersionMadeBy">
            <summary>
            Get the version made by for this entry or zero if unknown.
            The value / 10 indicates the major version number, and 
            the value mod 10 is the minor version number
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipEntry.HostSystemId">
            <summary>
            Gets the compatability information for the
            <see cref="P:Delta.Utilities.Compression.ZipEntry.ExternalFileAttributes">external file attribute</see>
            If the external file attributes are compatible with MS-DOS and can be
            read by PKZIP for DOS version 2.04g then this value will be zero.
            Otherwise the value will be non-zero and identify the host system on
            which the attributes are compatible.
            </summary>
            <remarks>
            The values for this as defined in the Zip File format and by others
            are shown below. The values are somewhat misleading in some cases as
            they are not all used as shown. You should consult the relevant
            documentation to obtain up to date and correct information. The
            modified appnote by the infozip group is particularly helpful as it
            documents a lot of peculiarities. The document is however a little
            dated.
            <list type="table">
            <item>0 - MS-DOS and OS/2 (FAT / VFAT / FAT32 file systems)</item>
            <item>1 - Amiga</item>
            <item>2 - OpenVMS</item>
            <item>3 - Unix</item>
            <item>4 - VM/CMS</item>
            <item>5 - Atari ST</item>
            <item>6 - OS/2 HPFS</item>
            <item>7 - Macintosh</item>
            <item>8 - Z-System</item>
            <item>9 - CP/M</item>
            <item>10 - Windows NTFS</item>
            <item>11 - MVS (OS/390 - Z/OS)</item>
            <item>12 - VSE</item>
            <item>13 - Acorn Risc</item>
            <item>14 - VFAT</item>
            <item>15 - Alternate MVS</item>
            <item>16 - BeOS</item>
            <item>17 - Tandem</item>
            <item>18 - OS/400</item>
            <item>19 - OS/X (Darwin)</item>
            <item>99 - WinZip AES</item>
            <item>remainder - unused</item>
            </list>
            </remarks>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipEntry.Version">
            <summary>
            Get minimum Zip feature version required to extract this
            entry
            </summary>		
            <remarks>
            Minimum features are defined as:<br/>
            1.0 - Default value<br/>
            1.1 - File is a volume label<br/>
            2.0 - File is a folder/directory<br/>
            2.0 - File is compressed using Deflate compression<br/>
            2.0 - File is encrypted using traditional encryption<br/>
            2.1 - File is compressed using Deflate64<br/>
            2.5 - File is compressed using PKWARE DCL Implode<br/>
            2.7 - File is a patch data set<br/>
            4.5 - File uses Zip64 format extensions<br/>
            4.6 - File is compressed using BZIP2 compression<br/>
            5.0 - File is encrypted using DES<br/>
            5.0 - File is encrypted using 3DES<br/>
            5.0 - File is encrypted using original RC2 encryption<br/>
            5.0 - File is encrypted using RC4 encryption<br/>
            5.1 - File is encrypted using AES encryption<br/>
            5.1 - File is encrypted using corrected RC2 encryption<br/>
            5.1 - File is encrypted using corrected RC2-64 encryption<br/>
            6.1 - File is encrypted using non-OAEP key wrapping<br/>
            6.2 - Central directory encryption (not confirmed yet)<br/>
            </remarks>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipEntry.RequiresZip64">
            <summary>
            Gets a value indicating if the entry requires Zip64 extensions to be
            stored.
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipEntry.DosTime">
            <summary>
            Gets/Sets DosTime
            </summary>		
        </member>
        <member name="P:Delta.Utilities.Compression.ZipEntry.DateTime">
            <summary>
            Gets/Sets the time of last modification of the entry.
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipEntry.Name">
            <summary>
            Returns the entry name.  The path components in the entry should
            always separated by slashes ('/').  Dos device names like C: should
            also be removed. See <see cref="M:Delta.Utilities.Compression.ZipEntry.CleanName(System.String)">CleanName</see>.
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipEntry.Comment">
            <summary>
            Gets/Sets the entry comment.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If comment is longer than 0xffff.
            </exception>
            <returns>
            The comment or null if not set.
            </returns>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipEntry.IsDirectory">
            <summary>
            Gets a value indicating of the if the entry is a directory.
            A directory is determined by an entry name with a trailing slash '/'.
            The external file attributes can also mark a file as a directory.
            The trailing slash convention should always be followed however.
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipEntry.IsFile">
            <summary>
            Get a value of true if the entry appears to be a file; false otherwise
            </summary>
            <remarks>
            This only takes account Windows attributes. Other operating systems
            are ignored. For Linux and others the result may be incorrect.
            </remarks>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipEntry.Size">
            <summary>
            Gets/Sets the size of the uncompressed data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the size is not in the range 0..0xffffffffL
            </exception>
            <returns>
            The size or -1 if unknown.
            </returns>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipEntry.CompressedSize">
            <summary>
            Gets/Sets the size of the compressed data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Size is not in the range 0..0xffffffff
            </exception>
            <returns>
            The size or -1 if unknown.
            </returns>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipEntry.Crc">
            <summary>
            Gets/Sets the crc of the uncompressed data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Crc is not in the range 0..0xffffffffL
            </exception>
            <returns>
            The crc value or -1 if unknown.
            </returns>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipEntry.CompressionMethod">
            <summary>
            Gets/Sets the compression method. Only Deflated and Stored are
            supported.
            </summary>
            <returns>
            The compression method for this entry
            </returns>
            <see cref="F:Delta.Utilities.Compression.CompressionMethod.Deflated"/>
            <see cref="F:Delta.Utilities.Compression.CompressionMethod.Stored"/>
        </member>
        <member name="T:Delta.Utilities.Compression.Streams.ZipInputStream">
            <summary>
            This is an InflaterInputStream that reads the files baseInputStream an
            zip archive one after another. It has a special method to get the zip
            entry of the next file. The zip entry contains information about the
            file name size, compressed size, Crc, etc.
            It includes support for Stored and Deflated entries.
            </summary>
            <example>This sample shows how to read a zip file
            <code lang="C#">
            using System;
            using System.Text;
            using System.IO;
            using Delta.Utilities.Compression;
            
            class MainClass
            {
            	public static void Main(string[] args)
            	{
            		ZipInputStream s = new ZipInputStream(File.OpenRead(args[0]));
            		
            		ZipEntry theEntry;
            		while ((theEntry = s.GetNextEntry()) != null)
                {
            			int size = 2048;
            			byte[] data = new byte[2048];
            			
            			Console.Write("Show contents (y/n) ?");
            			if (Console.ReadLine() == "y")
                  {
            				while (true)
                    {
            					size = s.Read(data, 0, data.Length);
            					if (size > 0)
                      {
            						Console.Write(new ASCIIEncoding().GetString(data, 0, size));
            					} // if
                      else
                      {
            						break;
            					} // else
            				} // while
            			} // if
            		} // while
            		s.Close();
            	} // Main(args)
            }	// class MainClass
            </code>
            </example>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.ZipInputStream.internalReader">
            <summary>
            The current reader this instance.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.ZipInputStream.crc">
            <summary>
            Crc32 checksum
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.ZipInputStream.entry">
            <summary>
            Entry
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.ZipInputStream.size">
            <summary>
            Size
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.ZipInputStream.method">
            <summary>
            Method
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.ZipInputStream.flags">
            <summary>
            Flags
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Streams.ZipInputStream.password">
            <summary>
            Password
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.ZipInputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new Zip input stream, for reading a zip archive.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.ZipInputStream.GetNextEntry">
            <summary>
            Advances to the next entry in the archive
            </summary>
            <returns>
            The next <see cref="T:Delta.Utilities.Compression.ZipEntry">entry</see> in the archive or null if
            there are no more entries.
            </returns>
            <remarks>
            If the previous entry is still open
            <see cref="M:Delta.Utilities.Compression.Streams.ZipInputStream.CloseEntry">CloseEntry</see> is called.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Input stream is closed
            </exception>
            <exception cref="T:Delta.Utilities.Compression.ZipException">
            Password is not set, password is invalid, compression method is
            invalid, version required to extract is not supported.
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.ZipInputStream.CloseEntry">
            <summary>
            Closes the current zip entry and moves to the next one.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The stream is closed
            </exception>
            <exception cref="T:Delta.Utilities.Compression.ZipException">
            The Zip stream ends early
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.ZipInputStream.ReadByte">
            <summary>
            Reads a byte from the current zip entry.
            </summary>
            <returns>
            The byte or -1 if end of stream is reached.
            </returns>
            <exception name="System.IO.IOException">
            An i/o error occured.
            </exception>
            <exception name="Delta.Utilities.Compression.ZipException">
            The deflated stream is corrupted.
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.ZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of bytes from the stream.
            </summary>
            <param name="buffer">The destination for the bytes.</param>
            <param name="offset">The index to start storing data.</param>
            <param name="count">The number of bytes to attempt to read.</param>
            <returns>Returns the number of bytes read.</returns>
            <remarks>Zero bytes read means end of stream.</remarks>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.ZipInputStream.BodyRead(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the current zip entry.
            </summary>
            <returns>
            The number of bytes read (this may be less than the length requested,
            even before the end of stream), or 0 on end of stream.
            </returns>
            <exception name="IOException">
            An i/o error occured.
            </exception>
            <exception cref="T:Delta.Utilities.Compression.ZipException">
            The deflated stream is corrupted.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The stream is not open.
            </exception>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.ZipInputStream.Close">
            <summary>
            Closes the zip input stream
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.ZipInputStream.ExtractZipEntry(Delta.Utilities.Compression.ZipEntry)">
            <summary>
            Extract zip currentEntry
            </summary>
            <param name="zipEntry">Zip entry</param>
            <returns>Memory stream</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.ZipInputStream.ReadDataDescriptor">
            <summary>
            Read data descriptor at the end of compressed data.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Streams.ZipInputStream.InitialRead(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Perform the initial read on an entry which may include
            reading encryption headers and setting up inflation.
            </summary>
            <param name="destination">Destination</param>
            <param name="offset">Offset</param>
            <param name="count">Count</param>
            <returns>Int</returns>
        </member>
        <member name="P:Delta.Utilities.Compression.Streams.ZipInputStream.Password">
            <summary>
            Optional password used for encryption when non-null
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.Streams.ZipInputStream.CanDecompressEntry">
            <summary>
            Gets a value indicating if the entry can be decompressed
            </summary>
            <remarks>
            The entry can only be decompressed if the library supports the zip
            features required to extract it. See the
            <see cref="P:Delta.Utilities.Compression.ZipEntry.Version">ZipEntry Version</see> property for more
            details.
            </remarks>
        </member>
        <member name="P:Delta.Utilities.Compression.Streams.ZipInputStream.IsEntryAvailable">
            <summary>
            Returns 1 if there is an entry available
            Otherwise returns 0.
            </summary>
        </member>
        <member name="T:Delta.Utilities.Compression.Streams.ZipInputStream.ReaderDelegate">
            <summary>
            Delegate for reading bytes from a stream.
            </summary>
            <param name="buffer">Buffer</param>
            <param name="offset">Offset</param>
            <param name="length">Length</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="T:Delta.Utilities.Compression.Deflaters.DeflateStrategy">
            <summary>
            Deflate strategy
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflateStrategy.Default">
            <summary>
            The default strategy.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflateStrategy.Filtered">
            <summary>
            This strategy will only allow longer string repetitions.
            It is useful for random data with a small character set.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflateStrategy.HuffmanOnly">
            <summary>
            This strategy will not look for string repetitions at all.
            It only encodes with Huffman trees (which means, that more common
            characters get a smaller encoding).
            </summary>
        </member>
        <member name="T:Delta.Utilities.Compression.Deflaters.DeflaterPending">
            <summary>
            This class stores the pending output of the Deflater.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterPending.#ctor">
            <summary>
            Create deflater pending
            </summary>
        </member>
        <member name="T:Delta.Utilities.Compression.Checksums.Crc32">
             <summary>
             Crc32 - Computes CRC32 data checksum of a data stream. Generate
             a table for a byte-wise 32-bit CRC calculation on the polynomial:
             x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1.
            
             Polynomials over GF(2) are represented in binary, one bit per
             coefficient, with the lowest powers in the most significant bit.
             Then adding polynomials is just exclusive-or, and multiplying a
             polynomial by x is a right shift by one. If we call the above polynomial
             p, and represent a byte as the polynomial q, also with the lowest power
             in the most significant bit (so the byte 0xb1 is the polynomial
             x^7+x^3+x+1), then the CRC is (q*x^32) mod p, where a mod b means the
             remainder after dividing a by b.
            
             This calculation is done using the shift-register method of multiplying
             and taking the remainder.  The register is initialized to zero, and for
             each incoming bit, x^32 is added mod p to the register if the bit is a
             one (where x^32 mod p is p+x^32 = x^26+...+1), and the register is
             multiplied mod p by x (which is shifting right by one and adding
             x^32 mod p if the bit shifted out is a one).  We start with the highest
             power (least significant bit) of q and repeat for all eight bits of q.
            
             The table is simply the CRC of all possible eight bit values. This is all
             the information needed to generate CRC'str on data a byte at a time for
             all combinations of CRC register values and incoming bytes.
             </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Checksums.Crc32.CrcSeed">
            <summary>
            Crc seed
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Checksums.Crc32.CrcTable">
            <summary>
            Crc table
            </summary>
            <returns>Uint []</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Checksums.Crc32.ComputeCrcValue(System.Byte[])">
            <summary>
            Compute crc value
            </summary>
            <param name="buffer">Buffer</param>
            <returns>Long</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Checksums.Crc32.ComputeCrcValue(System.IO.Stream)">
            <summary>
            Compute crc value
            </summary>
            <param name="stream">Stream</param>
            <returns>Long</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.Checksums.Crc32.crc">
            <summary>
            The crc data checksum so far.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Checksums.Crc32.Reset">
            <summary>
            Resets the CRC32 data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Checksums.Crc32.Update(System.Int32)">
            <summary>
            Updates the checksum with the int value.
            </summary>
            <param name="value">Byte is taken as the lower 8 bits of value</param>
        </member>
        <member name="M:Delta.Utilities.Compression.Checksums.Crc32.Update(System.Byte[])">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:Delta.Utilities.Compression.Checksums.Crc32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name="buffer">Buffer which contains the data</param>
            <param name="offset">Offset in the buffer where the data starts</param>
            <param name="count">Length of the data</param>
        </member>
        <member name="M:Delta.Utilities.Compression.Checksums.Crc32.ComputeCrc32(System.UInt32,System.Byte)">
            <summary>
            Compute crc 32
            </summary>
            <param name="oldCrc">Old crc</param>
            <param name="value">Value</param>
            <returns>Uint</returns>
        </member>
        <member name="P:Delta.Utilities.Compression.Checksums.Crc32.Value">
            <summary>
            Returns the CRC32 data checksum computed so far.
            </summary>
        </member>
        <member name="T:Delta.Utilities.Compression.Checksums.Crc32.Crc32Tests">
            <summary>
            Crc 32 tests
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Checksums.Crc32.Crc32Tests.TestCrc32">
            <summary>
            Test crc 32
            </summary>
        </member>
        <member name="T:Delta.Utilities.Compression.ZipEncryptionBase">
            <summary>
            ZipEncryptionBase provides the low level facilities for encryption
            and decryption using the ZipEncryption algorithm.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipEncryptionBase.keys">
            <summary>
            Keys
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipEncryptionBase.TransformByte">
            <summary>
            Transform a single byte 
            </summary>
            <returns>
            The transformed value
            </returns>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipEncryptionBase.SetKeys(System.Byte[])">
            <summary>
            Set keys
            </summary>
            <param name="keyData">Key data</param>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipEncryptionBase.UpdateKeys(System.Byte)">
            <summary>
            Update encryption keys 
            </summary>		
        </member>
        <member name="M:Delta.Utilities.Compression.ZipEncryptionBase.Reset">
            <summary>
            Reset the internal state.
            </summary>
        </member>
        <member name="T:Delta.Utilities.Compression.ZipEncryptionTransform">
            <summary>
            ZipEncryption CryptoTransform for encryption.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipEncryptionTransform.#ctor(System.Byte[])">
            <summary>
            Initialise a new instance of
            <see cref="T:Delta.Utilities.Compression.ZipEncryptionTransform"></see>
            </summary>
            <param name="keyBlock">The key block to use.</param>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipEncryptionTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies 
            the resulting transform to the specified region of the output byte
            array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.
            </param>
            <param name="inputOffset">The offset into the input byte array from
            which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to
            use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.
            </param>
            <param name="outputOffset">The offset into the output byte array from
            which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipEncryptionTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">
            The input for which to compute the transform.
            </param>
            <param name="inputOffset">
            The offset into the byte array from which to begin using data.
            </param>
            <param name="inputCount">
            The number of bytes in the byte array to use as data.
            </param>
            <returns>The computed transform.</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipEncryptionTransform.Dispose">
            <summary>
            Cleanup internal state.
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipEncryptionTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipEncryptionTransform.InputBlockSize">
            <summary>
            Gets the size of the input data blocks in bytes.
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipEncryptionTransform.OutputBlockSize">
            <summary>
            Gets the size of the output data blocks in bytes.
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipEncryptionTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
        </member>
        <member name="T:Delta.Utilities.Compression.ZipDecryptionTransform">
            <summary>
            ZipEncryption CryptoTransform for decryption.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipDecryptionTransform.#ctor(System.Byte[])">
            <summary>
            Initialise a new instance of
            <see cref="T:Delta.Utilities.Compression.ZipDecryptionTransform"></see>.
            </summary>
            <param name="keyBlock">The key block to decrypt with.</param>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipDecryptionTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies 
            the resulting transform to the specified region of the output byte
            array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.
            </param>
            <param name="inputOffset">The offset into the input byte array from
            which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array 
            to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.
            </param>
            <param name="outputOffset">The offset into the output byte array from
            which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipDecryptionTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.
            </param>
            <param name="inputOffset">The offset into the byte array from which to
            begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use
            as data.</param>
            <returns>The computed transform.</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipDecryptionTransform.Dispose">
            <summary>
            Cleanup internal state.
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipDecryptionTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipDecryptionTransform.InputBlockSize">
            <summary>
            Gets the size of the input data blocks in bytes.
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipDecryptionTransform.OutputBlockSize">
            <summary>
            Gets the size of the output data blocks in bytes.
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipDecryptionTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
        </member>
        <member name="T:Delta.Utilities.Compression.ZipEncryption">
            <summary>
            ZipEncryption embodies the classic or original encryption facilities used
            in Pkzip archives. While it has been superceded by more recent and more
            powerful algorithms, its still in use and is viable for preventing casual
            snooping.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipEncryption.GenerateKeys(System.Byte[])">
            <summary>
            Generates new encryption keys based on given seed
            </summary>
        </member>
        <member name="T:Delta.Utilities.Compression.ZipEncryptionManaged">
            <summary>
            Defines a wrapper object to access the Pkzip algorithm. 
            This class cannot be inherited.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.ZipEncryptionManaged.key">
            <summary>
            Key
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipEncryptionManaged.GenerateIV">
            <summary>
            Generate an initial vector.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipEncryptionManaged.GenerateKey">
            <summary>
            Generate a new random key.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipEncryptionManaged.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Create an encryptor.
            </summary>
            <param name="rgbKey">The key to use for this encryptor.</param>
            <param name="rgbIV">Initialisation vector for the new encryptor.</param>
            <returns>Returns a new ZipEncryption encryptor</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.ZipEncryptionManaged.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Create a decryptor.
            </summary>
            <param name="rgbKey">Keys to use for this new decryptor.</param>
            <param name="rgbIV">Initialisation vector for the new decryptor.</param>
            <returns>Returns a new decryptor.</returns>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipEncryptionManaged.BlockSize">
            <summary>
            Get / set the applicable block size.
            </summary>
            <remarks>The only valid block size is 8.</remarks>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipEncryptionManaged.LegalKeySizes">
            <summary>
            Get an array of legal <see cref="T:System.Security.Cryptography.KeySizes">key sizes.</see>
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipEncryptionManaged.LegalBlockSizes">
            <summary>
            Get an array of legal <see cref="T:System.Security.Cryptography.KeySizes">block sizes</see>.
            </summary>
        </member>
        <member name="P:Delta.Utilities.Compression.ZipEncryptionManaged.Key">
            <summary>
            Get / set the key value applicable.
            </summary>
        </member>
        <member name="T:Delta.Utilities.Compression.Inflaters.InflaterDynHeader">
            <summary>
            Inflater dyn header
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.InflaterDynHeader.repMin">
            <summary>
            Rep minimum
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.InflaterDynHeader.repBits">
            <summary>
            Rep bits
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.InflaterDynHeader.BL_ORDER">
            <summary>
            BL_ ORDER
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.InflaterDynHeader.blLens">
            <summary>
            Bl lens
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.InflaterDynHeader.litdistLens">
            <summary>
            Litdist lens
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.InflaterDynHeader.blTree">
            <summary>
            Bl tree
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.InflaterDynHeader.mode">
            <summary>
            Mode
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.InflaterDynHeader.lnum">
            <summary>
            Lnum
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.InflaterDynHeader.dnum">
            <summary>
            Lnum
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.InflaterDynHeader.blnum">
            <summary>
            Lnum
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.InflaterDynHeader.num">
            <summary>
            Lnum
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.InflaterDynHeader.repSymbol">
            <summary>
            Rep symbol
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.InflaterDynHeader.lastLen">
            <summary>
            Last len
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Inflaters.InflaterDynHeader.ptr">
            <summary>
            Ptr
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Inflaters.InflaterDynHeader.Decode(Delta.Utilities.Compression.Streams.StreamManipulator)">
            <summary>
            Decode
            </summary>
            <param name="input">Input</param>
            <returns>True if we are done decoding.</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Inflaters.InflaterDynHeader.BuildLitLenTree">
            <summary>
            Build lit len tree
            </summary>
            <returns>Inflater huffman tree</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Inflaters.InflaterDynHeader.BuildDistTree">
            <summary>
            Build dist tree
            </summary>
            <returns>Inflater huffman tree</returns>
        </member>
        <member name="T:Delta.Utilities.Compression.Deflaters.DeflaterHuffman">
            <summary>
            This is the DeflaterHuffman class. This class is <i>not</i> thread safe.
            This is inherent in the API, due to the split of deflate and setInput.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.BufferSize">
            <summary>
            Buffer size
            </summary>
            <returns>16384</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.LiteralNum">
            <summary>
            Litteral number
            </summary>
            <returns>286</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.DistanceNum">
            <summary>
            Distance number
            </summary>
            <returns>30</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.BitLengthNum">
            <summary>
            Bit length number
            </summary>
            <returns>19</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.Rep3_6">
            <summary>
            REP 3_6
            </summary>
            <returns>16</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.Rep3_10">
            <summary>
            REP 3_10
            </summary>
            <returns>18</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.Rep11_138">
            <summary>
            REP 11_138
            </summary>
            <returns>18</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.EofSymbol">
            <summary>
            EOF Symbol
            </summary>
            <returns>256</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.BLOrder">
            <summary>
            BL Order
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.Bit4Reverse">
            <summary>
            Bit 4 reverse
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.BitReverse(System.Int32)">
            <summary>
            Reverse the bits of a 16 bit value.
            </summary>
            <param name="toReverse">Value to reverse bits</param>
            <returns>Value with bits reversed</returns>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.pending">
            <summary>
            Pending buffer to use
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.#cctor">
            <summary>
            Create deflater huffman
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.#ctor(Delta.Utilities.Compression.Deflaters.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">Pending buffer to use</param>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.Reset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.SendAllTrees(System.Int32)">
            <summary>
            Write all trees to pending buffer
            </summary>		
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.CompressBlock">
            <summary>
            Compress current buffer writing data to pending buffer
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.FlushStoredBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with no compression
            </summary>
            <param name="stored">Data to write</param>
            <param name="storedOffset">Index of first byte to write</param>
            <param name="storedLength">Count of bytes to write</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.FlushBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with compression
            </summary>		
            <param name="stored">Data to flush</param>
            <param name="storedOffset">Index of first byte to flush</param>
            <param name="storedLength">Count of bytes to flush</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.IsFull">
            <summary>
            Get value indicating if internal buffer is full
            </summary>
            <returns>true if buffer is full</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.TallyLit(System.Int32)">
            <summary>
            Add literal to buffer
            </summary>
            <param name="lit"></param>
            <returns>Value indicating internal buffer is full</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.TallyDist(System.Int32,System.Int32)">
            <summary>
            Add distance code and length to literal and distance trees
            </summary>
            <param name="dist">Distance code</param>
            <param name="len">Length</param>
            <returns>Value indicating if internal buffer is full</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.Lcode(System.Int32)">
            <summary>
            Lcode
            </summary>
            <param name="len">Len</param>
            <returns>Int</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.Dcode(System.Int32)">
            <summary>
            Dcode
            </summary>
            <param name="distance">Distance</param>
            <returns>Int</returns>
        </member>
        <member name="T:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.Tree">
            <summary>
            Tree
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.Tree.freqs">
            <summary>
            Frequencies
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.Tree.length">
            <summary>
            Length
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.Tree.minNumCodes">
            <summary>
            Number of codes.
            </summary>
        </member>
        <member name="F:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.Tree.numCodes">
            <summary>
            Number of codes.
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.Tree.#ctor(Delta.Utilities.Compression.Deflaters.DeflaterHuffman,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create tree
            </summary>
            <param name="dh">Dh</param>
            <param name="elems">Elems</param>
            <param name="minCodes">Min codes</param>
            <param name="maxLength">Max length</param>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.Tree.Reset">
            <summary>
            Reset
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.Tree.WriteSymbol(System.Int32)">
            <summary>
            Write symbol
            </summary>
            <param name="code">code</param>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.Tree.CheckEmpty">
            <summary>
            Check empty
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.Tree.SetStaticCodes(System.Int16[],System.Byte[])">
            <summary>
            Set static codes
            </summary>
            <param name="stCodes">St codes</param>
            <param name="stLength">St length</param>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.Tree.BuildCodes">
            <summary>
            Build codes
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.Tree.BuildTree">
            <summary>
            Build tree
            </summary>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.Tree.GetEncodedLength">
            <summary>
            Get encoded length
            </summary>
            <returns>Int</returns>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.Tree.CalcBLFreq(Delta.Utilities.Compression.Deflaters.DeflaterHuffman.Tree)">
            <summary>
            Calc BL freq
            </summary>
            <param name="blTree">Bl tree</param>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.Tree.WriteTree(Delta.Utilities.Compression.Deflaters.DeflaterHuffman.Tree)">
            <summary>
            Write tree
            </summary>
            <param name="blTree">Bl tree</param>
        </member>
        <member name="M:Delta.Utilities.Compression.Deflaters.DeflaterHuffman.Tree.BuildLength(System.Int32[])">
            <summary>
            Build length
            </summary>
            <param name="childs">Childs</param>
        </member>
    </members>
</doc>
